<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tips</title>
  <icon>https://www.gravatar.com/avatar/04679fa0516b40f06b23f4850d13da20</icon>
  <subtitle>学一些小技巧</subtitle>
  <link href="/tips/atom.xml" rel="self"/>
  
  <link href="https://i.hstb1230.com/tips/"/>
  <updated>2019-08-10T10:10:11.596Z</updated>
  <id>https://i.hstb1230.com/tips/</id>
  
  <author>
    <name>Hstb</name>
    <email>i@hstb1230.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Python3的requests中使用自签名证书</title>
    <link href="https://i.hstb1230.com/tips/2019/07/%E5%9C%A8Python3%E7%9A%84requests%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6.html"/>
    <id>https://i.hstb1230.com/tips/2019/07/在Python3的requests中使用自签名证书.html</id>
    <published>2019-07-24T03:27:31.000Z</published>
    <updated>2019-08-10T10:10:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>在requests下使用代理访问https网站时出现了错误<a id="more"></a></p><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>Python版本为<code>3.5</code>/<code>3.6</code>/<code>3.7</code>，requests库版本为<code>2.21.0</code><br>代理软件: <code>Fiddler 4</code>，监听地址为：<code>0.0.0.0:8888</code>.</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一般情况下，我们直接访问https网页是这样的：</p><figure class="highlight python"><figcaption><span>get_https_1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个Session对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 使用该对象的get方法请求网站</span></span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br></pre></td></tr></table></figure><p>但有时候为了抓包做分析，看看提交内容是否正确，就会用到代理</p><figure class="highlight python"><figcaption><span>get_https_2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明一个Session对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 声明一个变量存放代理信息</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8888/"</span>,</span><br><span class="line">    <span class="string">"https"</span>: <span class="string">"http://127.0.0.1:8888/"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用代理的两种方法</span></span><br><span class="line"><span class="comment"># [1] 在参数中提交代理信息</span></span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>, proxies=proxies)</span><br><span class="line"><span class="comment"># [2] 修改Session对象的属性</span></span><br><span class="line">s.proxies = proxies</span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br></pre></td></tr></table></figure><p>然后就会出错，详细信息如下（过长，请稍微对比后自行略过）：</p><p>注：</p><ul><li><code>D:\RunEnvironment\Python36\</code>是python程序目录</li><li><code>X:/get_https_2.py</code>是代码文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">D:\RunEnvironment\Python36\python.exe X:/get_https_2.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\contrib\pyopenssl.py"</span>, line 456, <span class="keyword">in</span> wrap_socket</span><br><span class="line">    cnx.do_handshake()</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\OpenSSL\SSL.py"</span>, line 1915, <span class="keyword">in</span> do_handshake</span><br><span class="line">    self._raise_ssl_error(self._ssl, result)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\OpenSSL\SSL.py"</span>, line 1647, <span class="keyword">in</span> _raise_ssl_error</span><br><span class="line">    _raise_current_error()</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\OpenSSL\_util.py"</span>, line 54, <span class="keyword">in</span> exception_from_error_queue</span><br><span class="line">    raise exception_type(errors)</span><br><span class="line">OpenSSL.SSL.Error: [(<span class="string">'SSL routines'</span>, <span class="string">'tls_process_server_certificate'</span>, <span class="string">'certificate verify failed'</span>)]</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py"</span>, line 594, <span class="keyword">in</span> urlopen</span><br><span class="line">    self._prepare_proxy(conn)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py"</span>, line 805, <span class="keyword">in</span> _prepare_proxy</span><br><span class="line">    conn.connect()</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connection.py"</span>, line 344, <span class="keyword">in</span> connect</span><br><span class="line">    ssl_context=context)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\util\ssl_.py"</span>, line 347, <span class="keyword">in</span> ssl_wrap_socket</span><br><span class="line">    <span class="built_in">return</span> context.wrap_socket(sock, server_hostname=server_hostname)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\contrib\pyopenssl.py"</span>, line 462, <span class="keyword">in</span> wrap_socket</span><br><span class="line">    raise ssl.SSLError(<span class="string">'bad handshake: %r'</span> % e)</span><br><span class="line">ssl.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,)</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\adapters.py"</span>, line 449, <span class="keyword">in</span> send</span><br><span class="line">    timeout=timeout</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py"</span>, line 638, <span class="keyword">in</span> urlopen</span><br><span class="line">    _stacktrace=sys.exc_info()[2])</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\util\retry.py"</span>, line 399, <span class="keyword">in</span> increment</span><br><span class="line">    raise MaxRetryError(_pool, url, error or ResponseError(cause))</span><br><span class="line">urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host=<span class="string">'httpbin.org'</span>, port=443): Max retries exceeded with url: /user-agent (Caused by SSLError(SSLError(<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,),))</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"X:/get_https_2.py"</span>, line 8, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    r = s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\sessions.py"</span>, line 546, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> self.request(<span class="string">'GET'</span>, url, **kwargs)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\sessions.py"</span>, line 533, <span class="keyword">in</span> request</span><br><span class="line">    resp = self.send(prep, **send_kwargs)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\sessions.py"</span>, line 646, <span class="keyword">in</span> send</span><br><span class="line">    r = adapter.send(request, **kwargs)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\adapters.py"</span>, line 514, <span class="keyword">in</span> send</span><br><span class="line">    raise SSLError(e, request=request)</span><br><span class="line">requests.exceptions.SSLError: HTTPSConnectionPool(host=<span class="string">'httpbin.org'</span>, port=443): Max retries exceeded with url: /user-agent (Caused by SSLError(SSLError(<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,),))</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure><p>大概说是证书校验错误(<code>certificate verify failed</code>)，于是百度一番</p><h1 id="初步解决"><a href="#初步解决" class="headerlink" title="初步解决"></a>初步解决</h1><ul><li><p>在<code>get</code>/<code>post</code>等请求方法中加上参数<code>verify=False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.get(url, verify=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>或修改整个session的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.verify = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="彻底解决"><a href="#彻底解决" class="headerlink" title="彻底解决"></a>彻底解决</h1><p>虽然使用前面的做法后程序不出错了，但是每次通过代理访问https网站时又会出现警告:</p><blockquote><p><code>D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py:847</code>: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings" target="_blank" rel="noopener">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a></p></blockquote><p>大概意思是「现在创建的是未经验证的https请求，强烈建议添加证书验证」</p><p>同时也给了个文档地址，大概是要装<code>certifi</code>库，然后再做一些操作，不过折腾了一会也没搞懂，就放弃了.</p><p>后面去Google搜索，看到Stack Overflow上有个问题类似的帖子，阅读了下发现与我的需求差不多：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">"https://www.python.org"</span>, proxies=&#123;<span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8888"</span>, <span class="string">"https"</span>:<span class="string">"http:127.0.0.1:8888"</span>&#125;,verify=<span class="string">r"FiddlerRoot.pem"</span>)</span><br></pre></td></tr></table></figure>I've got to change .cer(DER format) file into .pem(PEM format). And I realized cert parameter was not that I wanted to use. The code above is a solution for me.<footer><strong>fx-kirin</strong><cite><a href="https://stackoverflow.com/questions/28195834/how-to-capture-python-sslhttps-connection-through-fiddler2" target="_blank" rel="noopener">stackoverflow</a></cite></footer></blockquote><p>后续补充: </p><blockquote><p>execute command in a console <code>openssl x509 -inform der -in FiddlerRoot.cer -out FiddlerRoot.pem</code></p></blockquote><p>大致意思是<code>verify</code>参数可以设置成证书文件的路径，但问题出在需要的是pem格式，而Fiddler导出的证书是<code>cer</code>文件.</p><p>所以要使用OpenSSL转换，命令为<code>openssl x509 -inform der -in [FiddlerRoot.cer] -out [FiddlerRoot.pem]</code></p><ul><li><code>[FiddlerRoot.cer]</code>为你从Fiddler中导出的cer文件路径(相对或绝对路径)</li><li><code>[FiddlerRoot.pem]</code>为导出的pem文件路径.</li></ul><p>因为Windows不带OpenSSL程序，为此又特地<a href="https://i.hstb1230.com/Windows10-64bit-build-OpenSSL.html">摸索了几天</a>，头大</p><p>执行命令后，将pem文件路径传给<code>verify</code>，或者修改整个Session对象的<code>verify</code>属性即可.</p><p>同时，也可以给<code>verify</code>赋值pem文件的所在目录，但要先用OpenSSL附带的<code>c_rehash.pl</code>处理该文件夹.</p><figure class="highlight python"><figcaption><span>get_https_3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个Session对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 修改代理信息</span></span><br><span class="line">s.proxies = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8888/"</span>,</span><br><span class="line">    <span class="string">"https"</span>: <span class="string">"http://127.0.0.1:8888/"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 设置自定义证书</span></span><br><span class="line"><span class="comment"># # 假设证书在代码目录下的cert文件夹里，文件名为FiddlerRoot.pem</span></span><br><span class="line"><span class="comment"># # 直接使用相对路径</span></span><br><span class="line">s.verify = <span class="string">r'cert\FiddlerRoot.pem'</span></span><br><span class="line"><span class="comment"># # 如果使用了c_rehash.pl对cert文件夹做了处理，可以修改为如下一行代码</span></span><br><span class="line">s.verify = <span class="string">r'cert'</span></span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br></pre></td></tr></table></figure><p>不过这工具(实际上是Perl代码文件)不怎么适应Windows，识别不到openssl路径，所以对它稍作修改，有需要可以在附件下载.</p><p>用了这个方法几天，发现还有个奇怪的坑，就是转换的pem文件只能在本次打开的Fiddler中使用，第二次打开Fiddler就会证书错误，但是导入到Windows证书管理后，浏览器是可以一直使用的，所以不知道怎么回事，有需要再摸索吧.</p><p>最后补充下这个工具的使用方法吧：</p><blockquote><p>首先需要电脑中要安装perl、openssl并配置环境变量，<br>然后在cmd中执行<code>perl c_rehash.pl pem文件所在目录</code>，<br>如果pem文件所在目录下多出了一个不明代码文件，那么就说明成功了。</p></blockquote><p>二次补充（这次应该是真的最后一次了）：</p><blockquote><p>今天给FTP服务器上TLS的时候，发现openssl生成的证书有效期只有一天，后来查了下，发现在参数列表中加个<code>-days [天数]</code>即可修改有效期.<br>因此也推测转换出来的pem证书也只有一天有效期，而我往往是开一天的Fiddler后才关，所以等我第二次打开Fiddler，也就是第二天的时候，证书自然失效了。<br>所以转换命令应为<code>openssl x509 -inform der -in [FiddlerRoot.cer] -out [FiddlerRoot.pem] -days [3650]</code></p></blockquote><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>本文代码(附件):</p><ul><li><a href="/tips/2019/07/在Python3的requests中使用自签名证书/get_https_1.py" title="get_https_1.py">get_https_1.py</a></li><li><a href="/tips/2019/07/在Python3的requests中使用自签名证书/get_https_2.py" title="get_https_2.py">get_https_2.py</a></li><li><a href="/tips/2019/07/在Python3的requests中使用自签名证书/get_https_3.py" title="get_https_3.py">get_https_3.py</a></li><li><a href="/tips/2019/07/在Python3的requests中使用自签名证书/c_rehash.pl" title="c_rehash.pl">c_rehash.pl</a></li></ul><p>参考链接:</p><ol><li><a href="https://www.cnblogs.com/tianqianlan/p/9431295.html" target="_blank" rel="noopener">REQUESTS库的文档高级用法</a></li><li><a href="https://www.th3r3p0.com/random/python-requests-and-burp-suite.html" target="_blank" rel="noopener">Python Requests and Burp Suite</a></li><li><a href="https://stackoverflow.com/questions/46503129/how-to-capture-python-https-traffic-in-fiddler" target="_blank" rel="noopener">How to capture python https traffic in fiddler? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/28195834/how-to-capture-python-sslhttps-connection-through-fiddler2" target="_blank" rel="noopener">How to capture python SSL(HTTPS) connection through fiddler2 - Stack Overflow</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在requests下使用代理访问https网站时出现了错误
    
    </summary>
    
      <category term="Python3" scheme="https://i.hstb1230.com/tips/categories/Python3/"/>
    
      <category term="requests" scheme="https://i.hstb1230.com/tips/categories/Python3/requests/"/>
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/tips/categories/Python3/requests/HTTPS/"/>
    
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/tips/tags/HTTPS/"/>
    
      <category term="Python3" scheme="https://i.hstb1230.com/tips/tags/Python3/"/>
    
      <category term="requests" scheme="https://i.hstb1230.com/tips/tags/requests/"/>
    
      <category term="proxy" scheme="https://i.hstb1230.com/tips/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript取网址请求串</title>
    <link href="https://i.hstb1230.com/tips/2019/02/JavaScript%E5%8F%96%E7%BD%91%E5%9D%80%E8%AF%B7%E6%B1%82%E4%B8%B2.html"/>
    <id>https://i.hstb1230.com/tips/2019/02/JavaScript取网址请求串.html</id>
    <published>2019-02-03T17:23:27.000Z</published>
    <updated>2019-08-07T01:34:30.791Z</updated>
    
    <content type="html"><![CDATA[<p>准确来说应该是取域名后面的那串文本，但是实在是不知道叫什么。<a id="more"></a></p><p>方法：使用<code>substring</code>截取url中在域名后面的文本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> href = <span class="built_in">window</span>.location.href; <span class="comment">// url</span></span><br><span class="line">  <span class="keyword">var</span> host = <span class="built_in">window</span>.location.host; <span class="comment">// 域名</span></span><br><span class="line">  <span class="keyword">var</span> query = href.substring(</span><br><span class="line">    href.lastIndexOf(host) + host.length, <span class="comment">// 要加长度</span></span><br><span class="line">    href.length );</span><br><span class="line">  <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前URL：http://localhost/manage/?test#123456</span><br><span class="line">调用结果：/manage/?test#123456</span><br></pre></td></tr></table></figure><p>使用场景：登录状态失效或不存在时，在跳转到登录页前获取当前功能页地址并传递给接口，登录后成功后跳转至该页面，优化用户体验。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准确来说应该是取域名后面的那串文本，但是实在是不知道叫什么。
    
    </summary>
    
      <category term="JavaScript" scheme="https://i.hstb1230.com/tips/categories/JavaScript/"/>
    
    
      <category term="日常笔记" scheme="https://i.hstb1230.com/tips/tags/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://i.hstb1230.com/tips/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>升级HTTPS需要注意的坑</title>
    <link href="https://i.hstb1230.com/tips/2017/10/%E5%8D%87%E7%BA%A7HTTPS%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91.html"/>
    <id>https://i.hstb1230.com/tips/2017/10/升级HTTPS需要注意的坑.html</id>
    <published>2017-10-12T16:21:26.000Z</published>
    <updated>2019-08-07T02:19:33.386Z</updated>
    
    <content type="html"><![CDATA[<p>没错，就是我，又来水文章的我。<a id="more"></a></p><p><del>但是今天应该算是来放干货的。</del></p><p>应该来说，从最开始的有个小绿锁到防运营商的广告污染，HTTPS 已经成了未来站点的发展趋势，<br>那么对应的，网上一定也会出现各种眼花缭乱的教程(<del>包括我的，虽然我之前根本没写过的说</del>)<br>但这些教程总是缺点东西，我写这篇文章的目的就是为了补充一下一些坑。</p><p>那啥，怎么<code>HTTP → HTTPS</code>就不说了哈，我只是想说下升级到 HTTPS 后需要注意的地方。</p><p>众所周知，HTTPS 网页里面不能引用 HTTP 资源，不然会被浏览器标记为<code>不安全</code>，(也就是没有小绿锁，<del>好好的逼格就这样被吃了</del>)，<br>那么，相信很多教程会建议你们把带有<code>http://</code>的内容替换成<code>https://</code>或者<code>//</code>，<br>再高端一点的，会教你们用 <del>世界上最好的</del> <code>PHP</code> 写个代理程序，然后配合 <code>JavaScript</code> 食用，这样做大概是因为某些资源站点不支持 HTTPS 。</p><p>而我就不一样了，作为一个经常长草的静态博客，我既不太想不能用<del>拍簧片</del> PHP，又想看到小绿锁，那我总得找个折中的办法：</p><p>在<code>&lt;head&gt;</code>标签下加上这样一行<code>&lt;meta&gt;</code>标签，就可以让浏览器强制使用 HTTPS 协议获取网页引用的所有资源：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"upgrade-insecure-requests"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>千万不要和我说你不知道怎么加(手动再见)</p><p>下面是效果对比：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/c590fd64ef9e17030aadf4f47b7041f8" alt="添加前的网络访问情况" title>                </div>                <div class="image-caption">添加前的网络访问情况</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/2003183483e9b65f677d457c94981675" alt title>                </div>                <div class="image-caption"></div>            </figure> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/e9b83454df49fcf865547cdc2aba23a8" alt="添加后的网络访问情况，敢跟我说这是审查元素改出来的效果，请主动把头伸过来，让我给你加个五毛特效" title>                </div>                <div class="image-caption">添加后的网络访问情况，敢跟我说这是审查元素改出来的效果，请主动把头伸过来，让我给你加个五毛特效</div>            </figure><p>有几点得强调下：</p><ol><li>我没测试过各大浏览器的兼容情况，据我<del>临时百度</del>了解，这是 <a href="https://www.w3.org/TR/2012/CR-CSP-20121115/" target="_blank" rel="noopener">W3C 在 2012 年发布的新标准里的一个内容</a>，但我想，是个现代浏览器应该都支持。</li><li>不要以为这个 META 标签是万能的，万一你引用的资源站点只支持 HTTP 协议访问，那么不好意思，该丢的只能丢了，建议有条件的还是用代理方式获取对应资源吧。</li></ol><blockquote><p>来自咸鱼的话：<br> 资源链接最好用<code>//</code>，因为浏览器会自动识别当前协议(<code>HTTP</code>/<code>HTTPS</code>)，不然以后出个新的协议又要改，那就又要接着改。<br> 关于HTTPS网页里不能引用HTTP资源这点可能会有些争议，我印象里前两年的Chrome好像是这样。<br><del>不要奇怪这个发布时间和更新，文章确实是那个时候开始写的，只不过今天(2018/04/02)才写完，原谅我的懒癌</del></p></blockquote><p>希望终有一天，所有的站点都能上HTTPS吧</p>]]></content>
    
    <summary type="html">
    
      只是补充点东西
    
    </summary>
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/tips/categories/HTTPS/"/>
    
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/tips/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>用PHP取图像颜色</title>
    <link href="https://i.hstb1230.com/tips/2017/10/%E7%94%A8PHP%E5%8F%96%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2.html"/>
    <id>https://i.hstb1230.com/tips/2017/10/用PHP取图像颜色.html</id>
    <published>2017-10-05T17:26:38.000Z</published>
    <updated>2019-08-07T02:19:28.730Z</updated>
    
    <content type="html"><![CDATA[<p>对 <a href="https://i.hstb.me/PhotoToHtml.html" title="博客上的一篇文章" target="_blank" rel="noopener">将图片转为Html网页</a> 以及发布在Github的 <a href="https://github.com/Hstb1230/img2html" title="无人问津" target="_blank" rel="noopener">img2html</a> 项目代码的一些补充<a id="more"></a></p><p>对于拥有丰富的扩展和类库的PHP来说，提取图像颜色并非难事，使用自带的<code>GD</code>扩展，借助其中的函数即可完成。</p><p>首先，我们需要借助 <code>imagecreatefrom</code> 开头的函数导入图像，(怎么获取数据就自己来吧，<code>file_get_contents</code> 之类的)</p><blockquote><p>官方文档列出了以下函数：</p><ol><li><code>imagecreatefrombmp</code></li><li><code>imagecreatefromgd2</code></li><li><code>imagecreatefromgd2part</code></li><li><code>imagecreatefromgd</code></li><li><code>imagecreatefromgif</code></li><li><code>imagecreatefromjpeg</code></li><li><code>imagecreatefrompng</code></li><li><code>imagecreatefromstring</code></li><li><code>imagecreatefromwbmp</code></li><li><code>imagecreatefromwebp</code></li><li><code>imagecreatefromxbm</code></li><li><code>imagecreatefromxpm</code></li></ol></blockquote><p>这些函数均只有一个参数，但需要注意的是，</p><blockquote><p>除了 <code>imagecreatefromstring</code> 函数外，其余函数的参数需要为文件的本地路径或网络地址，<br>而 <code>imagecreatefromstring</code> 函数的参数只能为文件数据，<br>并且 <code>imagecreatefromstring</code> 函数可以解析 <code>JPEG</code>，<code>PNG</code>，<code>GIF</code>，<code>WBMP</code> 和 <code>GD2</code> 图片文件。</p></blockquote><p>这里用 <a href="https://img.1sls.cn/Pic/png/6acc6a5b9267214e5f4f4ae12ad4a396" target="_blank" rel="noopener">png图片</a> 做解析，因此先</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img = imagecreatefrompng(<span class="string">'https://img.1sls.cn/Pic/png/6acc6a5b9267214e5f4f4ae12ad4a396'</span>);</span><br></pre></td></tr></table></figure><p>然后取图像的宽度与高度：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Y = imagesy($i); <span class="comment">//取高度</span></span><br><span class="line">$X = imagesx($i); <span class="comment">//取宽度</span></span><br></pre></td></tr></table></figure><p>如果我们要计算图像颜色的平均值，那么:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rgb = <span class="number">0</span>; <span class="comment">//用于统计颜色总值</span></span><br><span class="line">$n = $X * $Y; <span class="comment">//用于记录像素点数量</span></span><br></pre></td></tr></table></figure><p>然后先创建一个遍历行的循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个遍历列的循环，但是需要嵌套在行里，即：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></span><br><span class="line">  <span class="keyword">for</span> ($x=<span class="number">0</span>; $x&lt;$X; $x++) &#123; <span class="comment">//循环列</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时借助 <code>imagecolorat</code> 函数，取出指定像素点的颜色值(十进制)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></span><br><span class="line">  <span class="keyword">for</span> ($x=<span class="number">0</span>; $x&lt;$X; $x++) &#123; <span class="comment">//循环列</span></span><br><span class="line">    $rgb += imagecolorat($i,$x,$y); <span class="comment">//取出点($x,$y)的颜色值后，叠加计算</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后计算图像的平均颜色值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$rgb = $rgb / $n;</span><br></pre></td></tr></table></figure><p>得到的颜色值是 10进制 的，如果要转换成 16进制，可以借助函数 <code>dechex</code>。</p><p>最后，记得释放资源：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imagedestroy($i);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 &lt;a href=&quot;https://i.hstb.me/PhotoToHtml.html&quot; title=&quot;博客上的一篇文章&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;将图片转为Html网页&lt;/a&gt; 以及发布在Github的 &lt;a href=&quot;https://github.com/Hstb1230/img2html&quot; title=&quot;无人问津&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;img2html&lt;/a&gt; 项目代码的一些补充
    
    </summary>
    
      <category term="PHP" scheme="https://i.hstb1230.com/tips/categories/PHP/"/>
    
      <category term="图像操作" scheme="https://i.hstb1230.com/tips/categories/PHP/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="PHP" scheme="https://i.hstb1230.com/tips/tags/PHP/"/>
    
      <category term="图像操作" scheme="https://i.hstb1230.com/tips/tags/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>配置Notepad++的c语言运行脚本</title>
    <link href="https://i.hstb1230.com/tips/2017/10/%E9%85%8D%E7%BD%AENotepad++%E7%9A%84c%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC.html"/>
    <id>https://i.hstb1230.com/tips/2017/10/配置Notepad++的c语言运行脚本.html</id>
    <published>2017-10-04T17:41:36.000Z</published>
    <updated>2019-08-07T02:19:48.068Z</updated>
    
    <content type="html"><![CDATA[<p>上个月正式升级为一名学编程的大学生，不出意料，学校教我们C语言。<br>因为暂时不想使用IDE，所以只好自己安装编译器了，受以前初学时候的影响，我用了MinGW。</p><p>因为没有IDE，如果我要编译代码以及运行调试，就需要借助cmd，<br>但是每次都要输一遍cd那些代码，即使是复制黏贴，也是很烦人的，更何况我还懒。</p><p>后面想到把notepad++自带的运行功能与cmd结合一下，应该就方便很多。<a id="more"></a></p><p>然后上网查方法，看到的教程都是这样给的：</p><blockquote></blockquote><ol><li>复制以下代码，取名<code>编译C</code>：<br><code>cmd /k gcc -o &quot;$(CURRENT_DIRECTORY)\$(NAME_PART).exe&quot; &quot;$(FULL_CURRENT_PATH)&quot; &amp; PAUSE &amp; EXIT</code><blockquote></blockquote></li><li>复制以下代码，取名<code>运行C</code>：<br><code>cmd /c &quot;$(CURRENT_DIRECTORY)\$(NAME_PART).exe&quot; &amp; PAUSE &amp; EXIT</code></li></ol><p>仔细分析下，就会发现调试需要分两步操作，有点麻烦</p><p>所以我改了一下代码，将编译运行一步到位：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd /k gcc -o <span class="string">"<span class="variable">$(CURRENT_DIRECTORY)</span>/<span class="variable">$(NAME_PART)</span>.exe"</span> <span class="string">"<span class="variable">$(FULL_CURRENT_PATH)</span>"</span>  &amp;&amp;  <span class="string">"<span class="variable">$(CURRENT_DIRECTORY)</span>/<span class="variable">$(NAME_PART)</span>.exe"</span> &amp; PAUSE &amp; EXIT</span><br></pre></td></tr></table></figure><p>不过这样做有一个缺点，就是编译出错时，仍然会运行一次程序，如果之前又编译成功过，那么就有可能会误导你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月正式升级为一名学编程的大学生，不出意料，学校教我们C语言。&lt;br&gt;因为暂时不想使用IDE，所以只好自己安装编译器了，受以前初学时候的影响，我用了MinGW。&lt;/p&gt;
&lt;p&gt;因为没有IDE，如果我要编译代码以及运行调试，就需要借助cmd，&lt;br&gt;但是每次都要输一遍cd那些代码，即使是复制黏贴，也是很烦人的，更何况我还懒。&lt;/p&gt;
&lt;p&gt;后面想到把notepad++自带的运行功能与cmd结合一下，应该就方便很多。
    
    </summary>
    
      <category term="C语言" scheme="https://i.hstb1230.com/tips/categories/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="环境配置" scheme="https://i.hstb1230.com/tips/categories/C%E8%AF%AD%E8%A8%80/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="https://i.hstb1230.com/tips/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Notepad++" scheme="https://i.hstb1230.com/tips/tags/Notepad/"/>
    
      <category term="C语言" scheme="https://i.hstb1230.com/tips/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
