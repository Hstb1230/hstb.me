<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tips</title>
  <icon>https://www.gravatar.com/avatar/4c88b0402238088fdd1189be32a2a9a0</icon>
  <subtitle>学一些小技巧</subtitle>
  <link href="/tips/atom.xml" rel="self"/>
  
  <link href="https://i.hstb.me/tips/"/>
  <updated>2019-02-07T17:51:58.217Z</updated>
  <id>https://i.hstb.me/tips/</id>
  
  <author>
    <name>Hstb</name>
    <email>i@hstb.me</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript取网址请求串</title>
    <link href="https://i.hstb.me/tips/2019/02/JavaScript%E5%8F%96%E7%BD%91%E5%9D%80%E8%AF%B7%E6%B1%82%E4%B8%B2.html"/>
    <id>https://i.hstb.me/tips/2019/02/JavaScript取网址请求串.html</id>
    <published>2019-02-03T17:23:27.000Z</published>
    <updated>2019-02-07T17:51:58.217Z</updated>
    
    <content type="html"><![CDATA[<p>准确来说应该是取域名后面的那串文本，但是实在是不知道叫什么。<a id="more"></a></p><p>方法：使用<code>substring</code>截取url中在域名后面的文本。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> href = <span class="built_in">window</span>.location.href; <span class="comment">// url</span></div><div class="line">  <span class="keyword">var</span> host = <span class="built_in">window</span>.location.host; <span class="comment">// 域名</span></div><div class="line">  <span class="keyword">var</span> query = href.substring(</div><div class="line">    href.lastIndexOf(host) + host.length, <span class="comment">// 要加长度</span></div><div class="line">    href.length );</div><div class="line">  <span class="keyword">return</span> query;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">当前URL：http://localhost/manage/?test#123456</div><div class="line">调用结果：/manage/?test#123456</div></pre></td></tr></table></figure></p><p>使用场景：登录状态失效或不存在时，在跳转到登录页前获取当前功能页地址并传递给接口，登录后成功后跳转至该页面，优化用户体验。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准确来说应该是取域名后面的那串文本，但是实在是不知道叫什么。
    
    </summary>
    
      <category term="JavaScript" scheme="https://i.hstb.me/tips/categories/JavaScript/"/>
    
      <category term="网址" scheme="https://i.hstb.me/tips/categories/JavaScript/%E7%BD%91%E5%9D%80/"/>
    
    
      <category term="日常笔记" scheme="https://i.hstb.me/tips/tags/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://i.hstb.me/tips/tags/JavaScript/"/>
    
      <category term="网址" scheme="https://i.hstb.me/tips/tags/%E7%BD%91%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>升级HTTPS需要注意的坑</title>
    <link href="https://i.hstb.me/tips/2017/10/%E5%8D%87%E7%BA%A7HTTPS%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91.html"/>
    <id>https://i.hstb.me/tips/2017/10/升级HTTPS需要注意的坑.html</id>
    <published>2017-10-12T16:21:26.000Z</published>
    <updated>2019-02-04T17:54:40.486Z</updated>
    
    <content type="html"><![CDATA[<p>没错，就是我，又来水文章的我。<a id="more"></a></p><p><del>但是今天应该算是来放干货的。</del></p><p>应该来说，从最开始的有个小绿锁到防运营商的广告污染，HTTPS 已经成了未来站点的发展趋势，<br>那么对应的，网上一定也会出现各种眼花缭乱的教程(<del>包括我的，虽然我之前根本没写过的说</del>)<br>但这些教程总是缺点东西，我写这篇文章的目的就是为了补充一下一些坑。</p><p>那啥，怎么<code>HTTP → HTTPS</code>就不说了哈，我只是想说下升级到 HTTPS 后需要注意的地方。</p><p>众所周知，HTTPS 网页里面不能引用 HTTP 资源，不然会被浏览器标记为<code>不安全</code>，(也就是没有小绿锁，<del>好好的逼格就这样被吃了</del>)，<br>那么，相信很多教程会建议你们把带有<code>http://</code>的内容替换成<code>https://</code>或者<code>//</code>，<br>再高端一点的，会教你们用 <del>世界上最好的</del> <code>PHP</code> 写个代理程序，然后配合 <code>JavaScript</code> 食用，这样做大概是因为某些资源站点不支持 HTTPS 。</p><p>而我就不一样了，作为一个经常长草的静态博客，我既不太想不能用<del>拍簧片</del> PHP，又想看到小绿锁，那我总得找个折中的办法：</p><p>在<code>&lt;head&gt;</code>标签下加上这样一行<code>&lt;meta&gt;</code>标签，就可以让浏览器强制使用 HTTPS 协议获取网页引用的所有资源：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"upgrade-insecure-requests"</span>&gt;</span></div></pre></td></tr></table></figure></p><p>千万不要和我说你不知道怎么加(手动再见)</p><p>下面是效果对比：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/c590fd64ef9e17030aadf4f47b7041f8" alt="添加前的网络访问情况" title="">                </div>                <div class="image-caption">添加前的网络访问情况</div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/2003183483e9b65f677d457c94981675" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/e9b83454df49fcf865547cdc2aba23a8" alt="添加后的网络访问情况，敢跟我说这是审查元素改出来的效果，请主动把头伸过来，让我给你加个五毛特效" title="">                </div>                <div class="image-caption">添加后的网络访问情况，敢跟我说这是审查元素改出来的效果，请主动把头伸过来，让我给你加个五毛特效</div>            </figure><p>有几点得强调下：</p><ol><li>我没测试过各大浏览器的兼容情况，据我<del>临时百度</del>了解，这是 <a href="https://www.w3.org/TR/2012/CR-CSP-20121115/" target="_blank" rel="external">W3C 在 2012 年发布的新标准里的一个内容</a>，但我想，是个现代浏览器应该都支持。</li><li>不要以为这个 META 标签是万能的，万一你引用的资源站点只支持 HTTP 协议访问，那么不好意思，该丢的只能丢了，建议有条件的还是用代理方式获取对应资源吧。</li></ol><blockquote><p>来自咸鱼的话：<br> 资源链接最好用<code>//</code>，因为浏览器会自动识别当前协议(<code>HTTP</code>/<code>HTTPS</code>)，不然以后出个新的协议又要改，那就又要接着改。<br> 关于HTTPS网页里不能引用HTTP资源这点可能会有些争议，我印象里前两年的Chrome好像是这样。<br><del>不要奇怪这个发布时间和更新，文章确实是那个时候开始写的，只不过今天(2018/04/02)才写完，原谅我的懒癌</del></p></blockquote><p>希望终有一天，所有的站点都能上HTTPS吧</p>]]></content>
    
    <summary type="html">
    
      只是补充点东西
    
    </summary>
    
      <category term="HTTPS" scheme="https://i.hstb.me/tips/categories/HTTPS/"/>
    
    
      <category term="HTTPS" scheme="https://i.hstb.me/tips/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>用PHP取图像颜色</title>
    <link href="https://i.hstb.me/tips/2017/10/%E7%94%A8PHP%E5%8F%96%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2.html"/>
    <id>https://i.hstb.me/tips/2017/10/用PHP取图像颜色.html</id>
    <published>2017-10-05T17:26:38.000Z</published>
    <updated>2019-02-04T17:54:39.224Z</updated>
    
    <content type="html"><![CDATA[<p>对 <a href="https://i.hstb.me/PhotoToHtml.html" title="博客上的一篇文章">将图片转为Html网页</a> 以及发布在Github的 <a href="https://github.com/Hstb1230/img2html" title="无人问津" target="_blank" rel="external">img2html</a> 项目代码的一些补充<a id="more"></a></p><p>对于拥有丰富的扩展和类库的PHP来说，提取图像颜色并非难事，使用自带的<code>GD</code>扩展，借助其中的函数即可完成。</p><p>首先，我们需要借助 <code>imagecreatefrom</code> 开头的函数导入图像，(怎么获取数据就自己来吧，<code>file_get_contents</code> 之类的)</p><blockquote><p>官方文档列出了以下函数：</p><ol><li><code>imagecreatefrombmp</code></li><li><code>imagecreatefromgd2</code></li><li><code>imagecreatefromgd2part</code></li><li><code>imagecreatefromgd</code></li><li><code>imagecreatefromgif</code></li><li><code>imagecreatefromjpeg</code></li><li><code>imagecreatefrompng</code></li><li><code>imagecreatefromstring</code></li><li><code>imagecreatefromwbmp</code></li><li><code>imagecreatefromwebp</code></li><li><code>imagecreatefromxbm</code></li><li><code>imagecreatefromxpm</code></li></ol></blockquote><p>这些函数均只有一个参数，但需要注意的是，</p><blockquote><p>除了 <code>imagecreatefromstring</code> 函数外，其余函数的参数需要为文件的本地路径或网络地址，<br>而 <code>imagecreatefromstring</code> 函数的参数只能为文件数据，<br>并且 <code>imagecreatefromstring</code> 函数可以解析 <code>JPEG</code>，<code>PNG</code>，<code>GIF</code>，<code>WBMP</code> 和 <code>GD2</code> 图片文件。</p></blockquote><p>这里用 <a href="https://img.1sls.cn/Pic/png/6acc6a5b9267214e5f4f4ae12ad4a396" target="_blank" rel="external">png图片</a> 做解析，因此先<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$img = imagecreatefrompng(<span class="string">'https://img.1sls.cn/Pic/png/6acc6a5b9267214e5f4f4ae12ad4a396'</span>);</div></pre></td></tr></table></figure></p><p>然后取图像的宽度与高度：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$Y = imagesy($i); <span class="comment">//取高度</span></div><div class="line">$X = imagesx($i); <span class="comment">//取宽度</span></div></pre></td></tr></table></figure></p><p>如果我们要计算图像颜色的平均值，那么:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$rgb = <span class="number">0</span>; <span class="comment">//用于统计颜色总值</span></div><div class="line">$n = $X * $Y; <span class="comment">//用于记录像素点数量</span></div></pre></td></tr></table></figure></p><p>然后先创建一个遍历行的循环：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再创建一个遍历列的循环，但是需要嵌套在行里，即：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></div><div class="line">  <span class="keyword">for</span> ($x=<span class="number">0</span>; $x&lt;$X; $x++) &#123; <span class="comment">//循环列</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这时借助 <code>imagecolorat</code> 函数，取出指定像素点的颜色值(十进制)：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></div><div class="line">  <span class="keyword">for</span> ($x=<span class="number">0</span>; $x&lt;$X; $x++) &#123; <span class="comment">//循环列</span></div><div class="line">    $rgb += imagecolorat($i,$x,$y); <span class="comment">//取出点($x,$y)的颜色值后，叠加计算</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后计算图像的平均颜色值：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$rgb = $rgb / $n;</div></pre></td></tr></table></figure></p><p>得到的颜色值是 10进制 的，如果要转换成 16进制，可以借助函数 <code>dechex</code>。</p><p>最后，记得释放资源：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imagedestroy($i);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 &lt;a href=&quot;https://i.hstb.me/PhotoToHtml.html&quot; title=&quot;博客上的一篇文章&quot;&gt;将图片转为Html网页&lt;/a&gt; 以及发布在Github的 &lt;a href=&quot;https://github.com/Hstb1230/img2html&quot; title=&quot;无人问津&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;img2html&lt;/a&gt; 项目代码的一些补充
    
    </summary>
    
      <category term="PHP" scheme="https://i.hstb.me/tips/categories/PHP/"/>
    
      <category term="图像操作" scheme="https://i.hstb.me/tips/categories/PHP/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="PHP" scheme="https://i.hstb.me/tips/tags/PHP/"/>
    
      <category term="图像操作" scheme="https://i.hstb.me/tips/tags/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>配置Notepad++的c语言运行脚本</title>
    <link href="https://i.hstb.me/tips/2017/10/%E9%85%8D%E7%BD%AENotepad++%E7%9A%84c%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC.html"/>
    <id>https://i.hstb.me/tips/2017/10/配置Notepad++的c语言运行脚本.html</id>
    <published>2017-10-04T17:41:36.000Z</published>
    <updated>2019-02-04T17:54:41.614Z</updated>
    
    <content type="html"><![CDATA[<p>上个月正式升级为一名学编程的大学生，不出意料，学校教我们C语言。<br>因为暂时不想使用IDE，所以只好自己安装编译器了，受以前初学时候的影响，我用了MinGW。</p><p>因为没有IDE，如果我要编译代码以及运行调试，就需要借助cmd，<br>但是每次都要输一遍cd那些代码，即使是复制黏贴，也是很烦人的，更何况我还懒。</p><p>后面想到把notepad++自带的运行功能与cmd结合一下，应该就方便很多。<a id="more"></a></p><p>然后上网查方法，看到的教程都是这样给的：</p><blockquote><ol><li><p>复制以下代码，取名<code>编译C</code>：<br><code>cmd /k gcc -o &quot;$(CURRENT_DIRECTORY)\$(NAME_PART).exe&quot; &quot;$(FULL_CURRENT_PATH)&quot; &amp; PAUSE &amp; EXIT</code></p></li><li><p>复制以下代码，取名<code>运行C</code>：<br><code>cmd /c &quot;$(CURRENT_DIRECTORY)\$(NAME_PART).exe&quot; &amp; PAUSE &amp; EXIT</code></p></li></ol></blockquote><p>仔细分析下，就会发现调试需要分两步操作，有点麻烦</p><p>所以我改了一下代码，将编译运行一步到位：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmd /k gcc -o <span class="string">"<span class="variable">$(CURRENT_DIRECTORY)</span>/<span class="variable">$(NAME_PART)</span>.exe"</span> <span class="string">"<span class="variable">$(FULL_CURRENT_PATH)</span>"</span>  &amp;&amp;  <span class="string">"<span class="variable">$(CURRENT_DIRECTORY)</span>/<span class="variable">$(NAME_PART)</span>.exe"</span> &amp; PAUSE &amp; EXIT</div></pre></td></tr></table></figure></p><p>不过这样做有一个缺点，就是编译出错时，仍然会运行一次程序，如果之前又编译成功过，那么就有可能会误导你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月正式升级为一名学编程的大学生，不出意料，学校教我们C语言。&lt;br&gt;因为暂时不想使用IDE，所以只好自己安装编译器了，受以前初学时候的影响，我用了MinGW。&lt;/p&gt;
&lt;p&gt;因为没有IDE，如果我要编译代码以及运行调试，就需要借助cmd，&lt;br&gt;但是每次都要输一遍cd那些代码，即使是复制黏贴，也是很烦人的，更何况我还懒。&lt;/p&gt;
&lt;p&gt;后面想到把notepad++自带的运行功能与cmd结合一下，应该就方便很多。
    
    </summary>
    
      <category term="C语言" scheme="https://i.hstb.me/tips/categories/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="环境配置" scheme="https://i.hstb.me/tips/categories/C%E8%AF%AD%E8%A8%80/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="https://i.hstb.me/tips/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Notepad++" scheme="https://i.hstb.me/tips/tags/Notepad/"/>
    
      <category term="C语言" scheme="https://i.hstb.me/tips/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
