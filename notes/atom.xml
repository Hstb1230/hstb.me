<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notes</title>
  <icon>https://www.gravatar.com/avatar/04679fa0516b40f06b23f4850d13da20</icon>
  
  <link href="/notes/atom.xml" rel="self"/>
  
  <link href="https://i.hstb1230.com/notes/"/>
  <updated>2020-03-25T22:12:13.876Z</updated>
  <id>https://i.hstb1230.com/notes/</id>
  
  <author>
    <name>Hstb</name>
    <email>i@hstb1230.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Studio删除module</title>
    <link href="https://i.hstb1230.com/notes/2020/03/Android%20Studio/%E5%88%A0%E9%99%A4module.html"/>
    <id>https://i.hstb1230.com/notes/2020/03/Android%20Studio/%E5%88%A0%E9%99%A4module.html</id>
    <published>2020-03-25T20:34:04.000Z</published>
    <updated>2020-03-25T22:12:13.876Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>因为一些奇奇怪怪的原因(比如打错名字云云), 想要删了Module重建,<br>结果按「delete」键一点反应也没有,<br>右键Module, 看了菜单好一会, 没想到不能直接删除一个Module, </p></blockquote><p>一开始脑抽, 想着直接去项目文件夹下删除对应Module, 然而这肯定是不现实的, </p><h1 id="初步摸索"><a href="#初步摸索" class="headerlink" title="初步摸索"></a>初步摸索</h1><h2 id="使用「Load-Unload-Module」"><a href="#使用「Load-Unload-Module」" class="headerlink" title="使用「Load/Unload Module」"></a>使用<code>「Load/Unload Module」</code></h2><p>在右键菜单看了一会, 找到<code>「Load/Unload Module」</code>, </p><img src="/notes/2020/03/Android%20Studio/%E5%88%A0%E9%99%A4module/Load_or_Unload_Module.png" class=""><p>点击了<code>app</code> Module, 再<code>「Unload」</code>, </p><p>看了下项目文件夹, 发现app文件夹还在, 于是把它删了, </p><p>本以为万事大吉, 然而我去重建app后, 才发现不对劲.</p><h2 id="重建同名Module"><a href="#重建同名Module" class="headerlink" title="重建同名Module"></a>重建同名Module</h2><img src="/notes/2020/03/Android%20Studio/%E5%88%A0%E9%99%A4module/%E5%88%9B%E5%BB%BA%E5%90%8C%E5%90%8DModule.png" class=""><p>左边的Module列表里也没有<code>app</code>, 而右边弹出的Activity布局文件也不正常, 提示<code>Design editor is unavailable until next gradle sync.</code>,<br>在<code>「Sync Project with Gradle Files」</code>后, 提示<code>Failed to initialize editor.</code>, 并且<code>「Event Log」</code>也提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Load Settings</span><br><span class="line">Cannot load settings from file &#39;···\app\app.iml&#39;: File ···\app\app.iml does not exist</span><br><span class="line">Please correct the file content</span><br></pre></td></tr></table></figure><p>看上去是凉了.</p><p>于是又打开<code>「Load/Unload Module」</code>, 想要删除<code>app</code>,<br>但<code>app</code>还在<code>Unloaded Modules</code>列表里, 这时候我意识到我做错了,<br>只好将其先<code>Load</code>, <code>app</code>出现在列表, 但无任何文件, 与其他已存在的Module不太一样.</p><p>继续<code>「Sync Project with Gradle Files」</code>仍无法工作, </p><p>于是想着能不能先删除本地文件夹, 再重建app, 但被阻止了, 提示已存在<code>app</code>,</p><h2 id="使用「Invaildate-Caches-Restart」清除缓存"><a href="#使用「Invaildate-Caches-Restart」清除缓存" class="headerlink" title="使用「Invaildate Caches / Restart」清除缓存"></a>使用<code>「Invaildate Caches / Restart」</code>清除缓存</h2><p>接着摸索, 在<code>「File」</code>下面发现了这个功能, 就猜想是不是缓存的问题,<br>在操作后, Android Studio重启了, <code>Gradle Sync</code>又出现警告:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: root project &#39;homework&#39;: Unable to resolve additional project configuration.</span><br><span class="line">Details: org.apache.tools.ant.BuildException: Basedir ···\app does not exist</span><br></pre></td></tr></table></figure><p>双击后跳到<code>build.gradle (homework)</code>, 但该文件没有与<code>app</code>相关的信息, 显得有点无厘头,<br>不过可以猜测到应该是某个Gradle文件存在问题, 所以在<code>「Gradle Scripts」</code>文件夹下翻了翻, </p><h2 id="调整「settings-gradle」"><a href="#调整「settings-gradle」" class="headerlink" title="调整「settings.gradle」"></a>调整<code>「settings.gradle」</code></h2><p>在<code>「settings.gradle」</code>中看到<code>include &#39;:app&#39;</code>, 将其删除,<br>重新<code>「Sync Project with Gradle Files」</code>后没有再报错, 并且<code>app</code>也从Module列表中自动清除了.</p><p>看上去是解决了, 但很让我吐血,<br>因为我是带着复现后再解决的目的写这篇文章, 之前做到这的时候<code>app</code>还是在列表里删不掉, 结果现在自己没了, 没了···</p><p>但我还是得写下去 (倔强=-=)</p><h2 id="偶然出现的错误"><a href="#偶然出现的错误" class="headerlink" title="偶然出现的错误"></a>偶然出现的错误</h2><p>各种操作之后, Android Studio偶然的弹出一个错误(因为没复现到, 所以靠<a href="https://stackoverflow.com/questions/28668252/" target="_blank" rel="noopener">Stack Overflow</a>回忆下):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Android studio Error </span><br><span class="line">&quot;Unsupported Modules Detected: Compilation is not supported for following modules&quot;</span><br></pre></td></tr></table></figure><p>于是带着<code>Unsupported Modules Detected</code>搜了下, 发现 <a href="https://stackoverflow.com/questions/28668252/" target="_blank" rel="noopener">Stack Overflow</a> 上有一篇几年前的帖子,<br>因为已经试过, 所以我忽略了<code>「Invaildate Caches / Restart」</code>的做法, 看向了<code>Shady Sherif</code>的回答</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">close the project</span><br><span class="line">close Android Studio IDE</span><br><span class="line">delete the .idea directory</span><br><span class="line">delete all .iml files</span><br><span class="line">open Android Studio IDE and import the project</span><br></pre></td></tr></table></figure><p>关闭项目, 在关闭Android Studio后, 将<code>.idea</code>文件夹删除.<br>因为每个Module下都有一个<code>.iml</code>文件, 一个个删太费劲, 所以参考了 <a href="https://blog.csdn.net/zhongzhongzhen/article/details/81048011" target="_blank" rel="noopener">Windows下批量删除指定后缀文件 | CSDN</a> 后, 在项目文件夹下用cmd执行了删除命令.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> /a /f /s /q  "*.iml"</span><br></pre></td></tr></table></figure><p>然后用Android Studio重新打开项目, <code>app</code>已消失, 探索结束.</p><h1 id="正确的操作"><a href="#正确的操作" class="headerlink" title="正确的操作"></a>正确的操作</h1><p>在看了 <a href="https://blog.csdn.net/hyr83960944/article/details/37519299" target="_blank" rel="noopener">Android Studio如何删除module | CSDN</a> 后, 我才注意到右键菜单中还有一个<code>Open Module settings</code>,<br>选择对应Module, 在点击上方的<code>-</code>, 即可删除Module,<br>不过并不会删除Module文件夹, 需要自己去删除才算彻底删除Module.</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>[1] <a href="https://blog.csdn.net/hyr83960944/article/details/37519299" target="_blank" rel="noopener">Android Studio如何删除module | CSDN</a><br>[2] <a href="https://stackoverflow.com/questions/28668252/android-studio-error-unsupported-modules-detected-compilation-is-not-supported" target="_blank" rel="noopener">Unsupported Modules Detected | Stack Overflow</a><br>[3] <a href="https://blog.csdn.net/zhongzhongzhen/article/details/81048011" target="_blank" rel="noopener">Windows下批量删除指定后缀文件 | CSDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;因为一些奇奇怪怪的原因(比如打错名字云云), 想要删了Module重建,&lt;br
      
    
    </summary>
    
    
      <category term="Android Studio" scheme="https://i.hstb1230.com/notes/categories/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="https://i.hstb1230.com/notes/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio在一个项目里创建多个app</title>
    <link href="https://i.hstb1230.com/notes/2020/03/Android%20Studio/%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAapp.html"/>
    <id>https://i.hstb1230.com/notes/2020/03/Android%20Studio/%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAapp.html</id>
    <published>2020-03-24T19:29:03.000Z</published>
    <updated>2020-03-24T20:52:10.150Z</updated>
    
    <content type="html"><![CDATA[<p>因为每 布置一个作业 / 做一个demo 就要创建一个新Project(<s>项目</s>)实在太烦了, 偶然间看到网课里老师的截图, 于是开始了一波新摸索. <a id="more"></a></p><p>因为大多数情况下看到英文都是脑抽的状态, 会理解错意思, 所以反复摸了好几次.</p><p>首先需要知道的是: <strong>app实际上是一个<code>Module</code><s>(模块)</s></strong></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>当然是创建一个新项目, 或者用已经创建好的项目, 不然哪来的操作.</p><h2 id="创建Module"><a href="#创建Module" class="headerlink" title="创建Module"></a>创建Module</h2><p>依次点击<code>「File」</code>-<code>「New」</code>-<code>「New Module」</code>, </p><img src="/notes/2020/03/Android%20Studio/%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAapp/New_Module.png" class="" title="创建Module(模块)"><p>现在要做的就和之前创建新项目一模一样了: 选择类型 - 设置名字 - ···. </p><h2 id="导入Module"><a href="#导入Module" class="headerlink" title="导入Module"></a>导入Module</h2><p>如果想把之前已经做好的项目导入到这个项目里, </p><p>只要更改创建的最后一步操作即可, 即依次点击<code>「File」</code>-<code>「New」</code>-<code>「Import Module」</code>.</p><img src="/notes/2020/03/Android%20Studio/%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAapp/Import_Module.png" class="" title="导入Module(模块)"><p>然后点击原来项目的文件夹, </p><img src="/notes/2020/03/Android%20Studio/%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAapp/Import_Module_in_Path.png" class="" title="选择Module所在文件夹"><p>因为所有项目默认会创建一个<code>app</code>Module(<s>模块</s>), 导致两边都冲突, 因此需要先修改模块名, </p><img src="/notes/2020/03/Android%20Studio/%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAapp/Import_Module_with_conflict.png" class="" title="导入模块时冲突"><p>勾选<code>「Import」</code>, 将<code>「Module name」</code>修改为一个与项目中已存在的module都<strong>不重复的名字</strong> .</p><p>另外, 建议执行<code>「Import Module」</code>前先<strong>关闭对应的<code>「Project」</code></strong>, 否则后续操作中会出现一些难以预料的问题.</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/notes/2020/03/Android%20Studio/%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAapp/Mult_Module.png" class="" title="多个Module">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为每 布置一个作业 / 做一个demo 就要创建一个新Project(&lt;s&gt;项目&lt;/s&gt;)实在太烦了, 偶然间看到网课里老师的截图, 于是开始了一波新摸索.
    
    </summary>
    
    
      <category term="Android Studio" scheme="https://i.hstb1230.com/notes/categories/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="https://i.hstb1230.com/notes/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android启动与停止服务</title>
    <link href="https://i.hstb1230.com/notes/2020/03/Android/%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://i.hstb1230.com/notes/2020/03/Android/%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1.html</id>
    <published>2020-03-22T21:01:54.000Z</published>
    <updated>2020-03-22T21:14:31.266Z</updated>
    
    <content type="html"><![CDATA[<p>网课只说清楚怎么<code>start</code>, 没说<code>stop</code>… <a id="more"></a></p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>试着在server类中打关键字<code>stop</code>, 看到个<code>stopService</code>, 虽然是父类方法, 也重写成功了, 但并没有触发.</p><h1 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h1><p>然后在 <a href="https://stackoverflow.com/questions/5555765/stop-service-in-android" target="_blank" rel="noopener">StackOverflow</a> 找到具体用法, 顺便学了个精简写法.</p><h1 id="Way"><a href="#Way" class="headerlink" title="Way"></a>Way</h1><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startService(<span class="keyword">new</span> Intent(getApplicationContext(), MyService<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h2><h3 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopService(<span class="keyword">new</span> Intent(getApplicationContext(), MyService<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure><h3 id="Class-1"><a href="#Class-1" class="headerlink" title="Class"></a>Class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://stackoverflow.com/questions/5555765/stop-service-in-android" target="_blank" rel="noopener">StackOverflow</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网课只说清楚怎么&lt;code&gt;start&lt;/code&gt;, 没说&lt;code&gt;stop&lt;/code&gt;…
    
    </summary>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/categories/Android/"/>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android通过匹配Data启动Activity</title>
    <link href="https://i.hstb1230.com/notes/2020/03/Android/%E9%80%9A%E8%BF%87%E5%8C%B9%E9%85%8DData%E5%90%AF%E5%8A%A8Activity.html"/>
    <id>https://i.hstb1230.com/notes/2020/03/Android/%E9%80%9A%E8%BF%87%E5%8C%B9%E9%85%8DData%E5%90%AF%E5%8A%A8Activity.html</id>
    <published>2020-03-21T21:26:10.000Z</published>
    <updated>2020-03-21T21:51:27.092Z</updated>
    
    <content type="html"><![CDATA[<p>总有一些蜜汁坑点. <a id="more"></a></p><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"scheme://host:port/path"</span>));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>所谓Data即<code>Uri.parse</code>的参数<code>scheme://host:port/path</code>, </p><p>看起来很像HTTP链接对吧?</p><h2 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h2><table><thead><tr><th>key</th><th>description</th></tr></thead><tbody><tr><td>scheme</td><td>协议</td></tr><tr><td>host</td><td>主机名</td></tr><tr><td>port</td><td>端口号</td></tr><tr><td>path</td><td>这里包括前面的<code>/</code>, 之所以不删是为了与<code>port</code>区分</td></tr></tbody></table><h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a><code>AndroidManifest.xml</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".UrlStartActivity"</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"scheme"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"host"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:port</span>=<span class="string">"port"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:path</span>=<span class="string">"path"</span> </span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然<code>data</code>里面有好几个属性, 但实际上除了<code>scheme</code>, 其他字段都可以省略(如果想被其他app随意调用的话).</p><p>但这样远远不够, 一调用就会马上出错, </p><p>还需要在<code>intent-filter</code>下添加<code>action</code>与<code>category</code>标签, 其<code>name</code>属性值可以任意.</p><h2 id="完整的AndroidManifest-xml"><a href="#完整的AndroidManifest-xml" class="headerlink" title="完整的AndroidManifest.xml"></a>完整的<code>AndroidManifest.xml</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".UrlStartActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"uu"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"scheme"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"host"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:port</span>=<span class="string">"port"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:path</span>=<span class="string">"path"</span> </span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总有一些蜜汁坑点.
    
    </summary>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/categories/Android/"/>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android隐式启动其他Activity</title>
    <link href="https://i.hstb1230.com/notes/2020/03/Android/%E9%9A%90%E5%BC%8F%E5%90%AF%E5%8A%A8%E5%85%B6%E4%BB%96Activity.html"/>
    <id>https://i.hstb1230.com/notes/2020/03/Android/%E9%9A%90%E5%BC%8F%E5%90%AF%E5%8A%A8%E5%85%B6%E4%BB%96Activity.html</id>
    <published>2020-03-21T20:29:10.000Z</published>
    <updated>2020-03-22T18:26:52.602Z</updated>
    
    <content type="html"><![CDATA[<p>跟上次一样, 常规操作却又闪退. <a id="more"></a></p><h1 id="同应用内启动"><a href="#同应用内启动" class="headerlink" title="同应用内启动"></a>同应用内启动</h1><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.demo.action.SECOND"</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a><code>AndroidManifest.xml</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.demo.action.SECOND"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.content.ActivityNotFoundException: No Activity found to handle Intent &#123; act&#x3D;com.example.demo.action.SECOND &#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>错误意思大致是没有找到Activity.</p><p>在<a href="https://stackoverflow.com/questions/15614561/android-content-activitynotfoundexception-no-activity-found-to-handle-intent-sp" target="_blank" rel="noopener">StackOverflow</a>上使用错误日志搜到相似问题, 但那位仁兄是<code>Intent</code>启动的<code>activity name</code>与<code>AndroidManifest.xml</code>不一致导致的, </p><p>后面看着他的<code>AndroidManifest.xml</code>中有<code>label</code>属性和<code>category</code>标签, 就都加上去, 然后就不闪退了.</p><p>依次添加, 发现是<strong>缺少<code>category</code>标签</strong>导致的闪退.</p><h2 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h2><p>在<code>AndroidManifest.xml</code>的对应<code>activity</code>的<code>intent-filter</code>下添加 <strong><code>category</code></strong> 标签即可:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.demo.action.SECOND"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="其他应用内启动"><a href="#其他应用内启动" class="headerlink" title="其他应用内启动"></a>其他应用内启动</h1><h2 id="疏忽型错误"><a href="#疏忽型错误" class="headerlink" title="疏忽型错误"></a>疏忽型错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Activity found to handle Intent</span><br></pre></td></tr></table></figure><p>一般就是不存在这个action, 最大的可能性就是<strong>忘记安装</strong>对应的app到同一设备.</p><h2 id="权限型错误"><a href="#权限型错误" class="headerlink" title="权限型错误"></a>权限型错误</h2><p>要启动的app包名为<code>com.demo.app</code>, 对应的<code>activity</code>的<code>action</code>为<code>com.demo.app.second</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.SecurityException: Permission Denial: starting Intent &#123; act=com.demo.app.second cmp=com.demo.app/.SecondActivity &#125; ...</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>目标activity设置(或默认)其标签的属性 <strong><code>android:exported</code> 值为 <code>false</code></strong> , 即禁止其他app启动该activity.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>从原因入手, 在目标activity的xml标签中设置属性 <strong><code>android:exported</code>值为<code>true</code></strong> .</p><h3 id="AndroidManifest-xml-1"><a href="#AndroidManifest-xml-1" class="headerlink" title="AndroidManifest.xml"></a><code>AndroidManifest.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span> <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.demo.app.second"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>[1] <a href="https://stackoverflow.com/questions/15614561/android-content-activitynotfoundexception-no-activity-found-to-handle-intent-sp" target="_blank" rel="noopener">StackOverflow</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟上次一样, 常规操作却又闪退.
    
    </summary>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/categories/Android/"/>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android使用提示框闪退</title>
    <link href="https://i.hstb1230.com/notes/2020/03/Android/%E4%BD%BF%E7%94%A8%E6%8F%90%E7%A4%BA%E6%A1%86%E9%97%AA%E9%80%80.html"/>
    <id>https://i.hstb1230.com/notes/2020/03/Android/%E4%BD%BF%E7%94%A8%E6%8F%90%E7%A4%BA%E6%A1%86%E9%97%AA%E9%80%80.html</id>
    <published>2020-03-14T17:45:37.000Z</published>
    <updated>2020-03-14T18:22:35.596Z</updated>
    
    <content type="html"><![CDATA[<p>只是想弹个信息框, 结果一弹就闪退. <a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><figcaption><span>Alert Diglog</span><a href="/notes/downloads/code/Android\使用提示框闪退\AlertDiglog.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder dialog = <span class="keyword">new</span> AlertDialog.Builder(getApplicationContext()));</span><br><span class="line">dialog.setIcon(R.mipmap.ic_launcher);</span><br><span class="line">dialog.setTitle(<span class="string">"System Waring"</span>);</span><br><span class="line">dialog.setMessage(<span class="string">"This is a warning"</span>);</span><br><span class="line">dialog.setPositiveButtonIcon(getResources().getDrawable(R.drawable.reconnect));</span><br><span class="line">dialog.setPositiveButton(<span class="string">"continue"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">        Toast.makeText(getApplicationContext(), <span class="string">"Click continue"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">dialog.setNegativeButtonIcon(getResources().getDrawable(R.drawable.unlink));</span><br><span class="line">dialog.setNegativeButton(<span class="string">"cancel"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">        Toast.makeText(getApplicationContext(), <span class="string">"Click cancel"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">dialog.show();</span><br></pre></td></tr></table></figure><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.</span><br></pre></td></tr></table></figure><p>查了<a href="https://stackoverflow.com/questions/21814825/you-need-to-use-a-theme-appcompat-theme-or-descendant-with-this-activity" target="_blank" rel="noopener">Stack Overflow</a>, 以为是自己用了<code>android:theme=&quot;@style/Theme.AppCompat.NoActionBar&quot;</code>的关系, 尝试了以下操作</p><ul><li>但不想把标题栏显示出来, 先试着改成其他的<code>NoActionBar</code>值, 还是崩,</li><li>看有些回复说的是给弹<code>alert</code>的<code>activity</code>单独加<code>android:theme</code>字段, 试了下依旧崩, </li><li>被逼无奈, 只好先改成无<code>NoActionBar</code>, 依旧无用.</li><li>在外围的<code>application</code>把<code>android:theme</code>字段改成了无<code>NoActionBar</code>, 还是崩.</li><li>实在是被搞郁闷了, 把<code>application</code>把<code>android:theme</code>字段改回默认的<code>@style/AppTheme</code>, 结果还崩.</li></ul><p>这下是真的蒙圈了, 默认配方都不行?</p><p>于是再看回之前写的弹框代码, 发现<code>AndroidManifest.xml</code>没啥差别, 再去对了下代码, 发现是声明<code>AlertDiglog</code>的代码有问题(也就是第一行):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AlertDialog.Builder(getApplicationContext()));</span><br></pre></td></tr></table></figure><p>实际上不该用获取上下文方法<code>getApplicationContext</code>, 而是<strong>指定成要弹框的那个<code>Activity</code></strong>(比如说<code>MainActivity</code>):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>不是很懂为什么, 暂时没查到原因.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只是想弹个信息框, 结果一弹就闪退.
    
    </summary>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/categories/Android/"/>
    
    
      <category term="Android" scheme="https://i.hstb1230.com/notes/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>PAT(Base) 1073 多选题常见计分法</title>
    <link href="https://i.hstb1230.com/notes/2020/02/PAT-Base-1073-%E5%A4%9A%E9%80%89%E9%A2%98%E5%B8%B8%E8%A7%81%E8%AE%A1%E5%88%86%E6%B3%95.html"/>
    <id>https://i.hstb1230.com/notes/2020/02/PAT-Base-1073-%E5%A4%9A%E9%80%89%E9%A2%98%E5%B8%B8%E8%A7%81%E8%AE%A1%E5%88%86%E6%B3%95.html</id>
    <published>2020-02-28T22:23:37.000Z</published>
    <updated>2020-02-28T23:00:57.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接: <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805263624683520" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805263624683520</a> <a id="more"></a></p></blockquote><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入在第一行给出两个正整数 N（≤1000）和 M（≤100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为<code>(选中的选项个数 选项1 ……)</code>，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：<code>错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号</code>。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出<code>Too simple</code>。</p><h2 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h2><pre><code>3 4 3 4 2 a c2 5 1 b5 3 2 b c1 5 4 a b d e(2 a c) (3 b d e) (2 a c) (3 a b e)(2 a c) (1 b) (2 a b) (4 a b d e)(2 b d) (1 e) (1 c) (4 a b c d)</code></pre><h2 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h2><pre><code>3.56.02.52 2-e2 3-a2 3-b</code></pre><h2 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h2><pre><code>2 2 3 4 2 a c2 5 1 b(2 a c) (1 b)(2 a c) (1 b)</code></pre><h2 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h2><pre><code>5.05.0Too simple</code></pre><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><blockquote><p>因为通宵肝题, 所以不太能保证写清楚思路, 见谅.<br>这题第一眼让我想起1058, 本以为挺简单, 只是加了个统计选项, 直到写完v1测了下样例1才发现too young too simple.</p></blockquote><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ol><li>因为选项数据是<code>(数量 选项1, 选项2...)</code>, 所以多了一步解析问题,<br>我采用的办法是先<code>getline</code>, 再查找<code>(</code>的位置, 然后用<code>sscanf</code>读, 因为选项只有<code>a</code>-<code>e</code>, 所以每次把位置<code>+2</code>就能排除干扰数据了(指<code>()</code>)<br>因为最开始比较蜜汁自信, 就没有看<code>1058</code>copy一下, 所以又被坑了一次, 在<code>1058</code>里, 我用的是string类的find方法, 异曲同工. </li><li>错误数据有两个键, 分别是题目编号和选项编号, 排序倒是不难处理, 麻烦的是正确指向对应数据.<br>可以先构建一个结构体存放两个键, 然后用<code>map</code>, 但这样要多写一个变量, 嫌麻烦就没采用;<br>我的做法是将这两个键组合成浮点数, 也就是题目编号做整数部分, 选项编号做小数部分.</li><li>错误选项的意思是<strong>没选全时漏选的正确选项 + 选的错误选项</strong>, <code>[1]</code><br>测样例1的时候感觉很奇怪, 明明<code>b</code>是第3题的正确选项, 为什么会是错误选项, 后面看到其他人的解析才懂. 然后就很坑爹了, 这意味着我可能要重写代码, 但在思考后, 我发现并不用,<br>既然是<strong>没选全时漏选的正确选项</strong>, 那就把正确选项也当成错误选项来统计, 初始的错误次数即学生人数, 选对一次就把错误次数减一, 最后得到的就是漏选的人数, 即该正确选项的错误次数.</li><li>这道题真正的做法是用异或之类的位运算, 对这块不是特别懂, 就不解释了, 有兴趣的看柳神的题解<code>[2]</code>, 要简单很多.</li></ol><h2 id="Code-of-it"><a href="#Code-of-it" class="headerlink" title="Code of it"></a><code>Code of it</code></h2><figure class="highlight cpp"><figcaption><span>answer-with-difficult</span><a href="/notes/downloads/code/PAT(Base)\1073-多选题常见计分法\answer-with-difficult.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line"><span class="keyword">int</span> full_score, answer_count, true_answer_count;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; true_answer;</span><br><span class="line">} question;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(mp a, mp b)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(a.second != b.second)</span><br><span class="line"><span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((<span class="keyword">int</span>)a.first != (<span class="keyword">int</span>)b.first)</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>)a.first &lt; (<span class="keyword">int</span>)b.first;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">int</span>)(a.first * <span class="number">10</span>) % <span class="number">10</span>) &lt; ((<span class="keyword">int</span>)(b.first * <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_wrong</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; wrong)</span> </span>{</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;mp&gt; <span class="title">mps</span><span class="params">(wrong.begin(), wrong.end())</span></span>;</span><br><span class="line">sort(mps.begin(), mps.end(), cmp);</span><br><span class="line"><span class="keyword">int</span> len = mps.size();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"====\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d-%c\n"</span>, mps[i].second, (<span class="keyword">int</span>)mps[i].first, (<span class="string">'a'</span> + (<span class="keyword">int</span>)(mps[i].first * <span class="number">10</span>) % <span class="number">10</span>));</span><br><span class="line"><span class="comment">//printf("%d-%c\n", (int)mps[i].first, ('a' + (int)(mps[i].first * 10) % 10));</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"====\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;question&gt; <span class="title">q</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt; wrong;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q[i].full_score &gt;&gt; q[i].answer_count &gt;&gt; q[i].true_answer_count;</span><br><span class="line">q[i].true_answer.resize(q[i].true_answer_count);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q[i].true_answer_count; j++) {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q[i].true_answer[j];</span><br><span class="line">wrong[(i + <span class="number">1</span> + <span class="number">0.1</span> * (q[i].true_answer[j] - <span class="string">'a'</span>))] = n;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//print_wrong(wrong);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> all_answers;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * loc;</span><br><span class="line"><span class="keyword">int</span> choose_count, flag;</span><br><span class="line"><span class="keyword">char</span> choose;</span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">getline(<span class="built_in">cin</span>, all_answers);</span><br><span class="line"><span class="keyword">if</span>(all_answers == <span class="string">""</span>) <span class="keyword">continue</span>;</span><br><span class="line">loc = all_answers.c_str();</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) {</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(*loc != <span class="string">'('</span>) loc++;</span><br><span class="line">loc++;</span><br><span class="line"><span class="built_in">sscanf</span>(loc, <span class="string">"%d"</span>, &amp;choose_count);</span><br><span class="line"><span class="comment">//printf("%d ", choose_count);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; choose_count; k++) {</span><br><span class="line">loc += <span class="number">2</span>;</span><br><span class="line"><span class="built_in">sscanf</span>(loc, <span class="string">"%c"</span>, &amp;choose);</span><br><span class="line"><span class="comment">//printf("%c ", choose);</span></span><br><span class="line"><span class="keyword">if</span>(find(q[j].true_answer.begin(), q[j].true_answer.end(), choose) != q[j].true_answer.end()) {</span><br><span class="line">wrong[(j + <span class="number">1</span> + <span class="number">0.1</span> * (choose - <span class="string">'a'</span>))]--;</span><br><span class="line"><span class="keyword">if</span>(flag &gt;= <span class="number">0</span>)</span><br><span class="line">flag++;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// Maybe Input Invaild Choose</span></span><br><span class="line"><span class="keyword">if</span>((choose - <span class="string">'a'</span>) &lt;= q[j].answer_count)</span><br><span class="line">wrong[(j + <span class="number">1</span> + <span class="number">0.1</span> * (choose - <span class="string">'a'</span>))]++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">-1</span>) {</span><br><span class="line"><span class="comment">// have wrong</span></span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span>(flag == q[j].true_answer_count) {</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">sum += q[j].full_score;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="comment">// part of true</span></span><br><span class="line">sum += <span class="number">0.5</span> * q[j].full_score;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//printf("%d %.1f\n", flag, sum);</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//print_wrong(wrong);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>, sum);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;mp&gt; <span class="title">mps</span><span class="params">(wrong.begin(), wrong.end())</span></span>;</span><br><span class="line">sort(mps.begin(), mps.end(), cmp);</span><br><span class="line"><span class="keyword">int</span> len = mps.size();</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; mps[i].second &lt;= <span class="number">0</span>) {</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; mps[i].second != mps[i - <span class="number">1</span>].second)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d-%c\n"</span>, mps[i].second, (<span class="keyword">int</span>)mps[i].first, (<span class="string">'a'</span> + (<span class="keyword">int</span>)(mps[i].first * <span class="number">10</span>) % <span class="number">10</span>));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Too simple"</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="Code-of-1058"><a href="#Code-of-1058" class="headerlink" title="Code of 1058"></a><code>Code of 1058</code></h2><figure class="highlight cpp"><figcaption><span>1058-选择题</span><a href="/notes/downloads/code/PAT(Base)\1073-多选题常见计分法\1058-选择题.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line"><span class="keyword">int</span> full;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> true_ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> wrong;</span><br><span class="line">} problem;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(problem a, problem b)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(a.wrong == b.wrong)</span><br><span class="line"><span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line"><span class="keyword">return</span> a.wrong &gt; b.wrong;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printProblems</span><span class="params">(<span class="built_in">vector</span>&lt;problem&gt; p)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = p.size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d: %d\n"</span>, p[i].id, p[i].wrong);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;problem&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i].full &gt;&gt; p[i].num &gt;&gt; p[i].true_ans;</span><br><span class="line">p[i].id = i + <span class="number">1</span>;</span><br><span class="line">p[i].wrong = <span class="number">0</span>;</span><br><span class="line">p[i].ans.resize(p[i].true_ans);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p[i].true_ans; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i].ans[j];</span><br><span class="line">sort(p[i].ans.begin(), p[i].ans.end());</span><br><span class="line">}</span><br><span class="line"><span class="built_in">string</span> ans_string;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * tmp;</span><br><span class="line"><span class="keyword">int</span> loc, num;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; choose;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">score</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">getline(<span class="built_in">cin</span>, ans_string);</span><br><span class="line"><span class="keyword">if</span>(ans_string == <span class="string">""</span>) <span class="keyword">continue</span>;</span><br><span class="line">loc = <span class="number">0</span>;</span><br><span class="line">tmp = ans_string.c_str();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) {</span><br><span class="line">loc = ans_string.find(<span class="string">'('</span>, loc) + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">sscanf</span>(tmp + loc, <span class="string">"%d"</span>, &amp;num);</span><br><span class="line">choose.resize(num);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; num; k++) {</span><br><span class="line"><span class="built_in">sscanf</span>(tmp + loc + (k + <span class="number">1</span>) * <span class="number">2</span>, <span class="string">"%c"</span>, &amp;choose[k]);</span><br><span class="line">}</span><br><span class="line">sort(choose.begin(), choose.end());</span><br><span class="line"><span class="keyword">if</span>(choose != p[j].ans)</span><br><span class="line">p[j].wrong++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">score[i] += p[j].full;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">sort(p.begin(), p.end(), cmp);</span><br><span class="line"><span class="comment">//printProblems(p);</span></span><br><span class="line">    <span class="keyword">if</span>(p[<span class="number">0</span>].wrong == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Too simple"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, p[<span class="number">0</span>].wrong, p[<span class="number">0</span>].id);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p.size(); i++) {</span><br><span class="line"><span class="keyword">if</span>(p[i].wrong != p[i - <span class="number">1</span>].wrong)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, p[i].id);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>[1] <a href="https://blog.csdn.net/CV_Jason/article/details/79587893" target="_blank" rel="noopener">https://blog.csdn.net/CV_Jason/article/details/79587893</a><br>[2] <a href="https://www.liuchuo.net/archives/4216" target="_blank" rel="noopener">https://www.liuchuo.net/archives/4216</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接: &lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/problems/994805263624683520&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pintia.cn/problem-sets/994805260223102976/problems/994805263624683520&lt;/a&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="https://i.hstb1230.com/notes/categories/PAT/"/>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>PAT(Base) 1055 集体照</title>
    <link href="https://i.hstb1230.com/notes/2020/02/PAT(Base)-1055-%E9%9B%86%E4%BD%93%E7%85%A7.html"/>
    <id>https://i.hstb1230.com/notes/2020/02/PAT(Base)-1055-%E9%9B%86%E4%BD%93%E7%85%A7.html</id>
    <published>2020-02-20T15:35:43.000Z</published>
    <updated>2020-02-20T16:57:54.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接: <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805272021680128" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805272021680128</a> <a id="more"></a></p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>拍集体照时队形很重要，这里对给定的 <strong><em>N</em></strong> 个人 <strong><em>K</em></strong> 排的队形设计排队规则如下：</p><ul><li>每排人数为 <strong><em>N</em></strong> /<strong><em>K</em></strong>（向下取整），多出来的人全部站在最后一排；</li><li>后排所有人的个子都不比前排任何人矮；</li><li>每排中最高者站中间（中间位置为 m/2+1，其中 m 为该排人数，除法向下取整）；</li><li>每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；</li><li>若多人身高相同，则按名字的字典序升序排列。这里保证无重名。</li></ul><p>现给定一组拍照人，请编写程序输出他们的队形。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 <strong><em>N</em></strong>（≤10^4，总人数）和 <strong><em>K</em></strong>（≤10，总排数）。随后 <strong><em>N</em></strong> 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出拍照的队形。即<strong><em>K</em></strong>排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><pre><code>10 3Tom 188Mike 170Eva 168Tim 160Joe 190Ann 168Bob 175Nick 186Amy 160John 159</code></pre><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><pre><code>Bob Tom Joe NickAnn Mike EvaTim Amy John</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>按照题目意思, 我们需要存入身高和姓名信息, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">string name;</span><br><span class="line">int high;</span><br><span class="line">&#125; people;</span><br></pre></td></tr></table></figure><p>因为要排序后再分成<code>K</code>组, 最高的人在最后一排, 但是是先输出最后一排的人,<br>所以按照身高做递减排序, 同身高时, 需要根据名字做升序排列, 比较函数并不难写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool cmp(people a, people b) &#123;</span><br><span class="line">if(a.high &#x3D;&#x3D; b.high)</span><br><span class="line">return a.name &lt; b.name;</span><br><span class="line">else</span><br><span class="line">return a.high &gt; b.high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以题目给的demo为例, 人员经过排序后, 顺序如下表所示:</p><table><thead><tr><th align="center">name</th><th align="center">height</th></tr></thead><tbody><tr><td align="center">Joe</td><td align="center">190</td></tr><tr><td align="center">Tom</td><td align="center">188</td></tr><tr><td align="center">Nick</td><td align="center">186</td></tr><tr><td align="center">Bob</td><td align="center">175</td></tr><tr><td align="center">PRINT</td><td align="center"><code>Bob Tom Joe Nick</code></td></tr><tr><td align="center">Mike</td><td align="center">170</td></tr><tr><td align="center">Ann</td><td align="center">168</td></tr><tr><td align="center">Eva</td><td align="center">168</td></tr><tr><td align="center">PRINT</td><td align="center"><code>Ann Mike Eva</code></td></tr><tr><td align="center">Amy</td><td align="center">160</td></tr><tr><td align="center">Tim</td><td align="center">160</td></tr><tr><td align="center">John</td><td align="center">159</td></tr><tr><td align="center">PRINT</td><td align="center"><code>Tim Amy John</code></td></tr></tbody></table><p>每排最高的人要站在中间位置(<code>m / 2 + 1</code>, 向下取整), 假设每排的第一个人下标是0, 那么其实就等于<code>m / 2</code>.</p><p>而其他人要依次”先右后左”的站在最高人两侧, 但因为要面对这些人, 所以实际上是”先左后右”.</p><p>因为每排人员位置的分布不是特别规律, 所以一开始有点想再加一个字符串数组存放名字, 但是后面觉得太浪费空间, 就没有采用这种方法(虽然简单).</p><blockquote><p>因为脑子一时糊涂, 把<code>K</code>当成每排人数, 只过了三个点, 以为是写法有问题, 就重新推理一遍,<br>  得出第二种方法, 还是只过前三点(因为K), 后面看了下网友写法<code>[1]</code>才想起, 纠正了下, 再次提交, 法1和法2均通过.</p></blockquote><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h3><table><thead><tr><th align="center">name</th><th align="center">height</th></tr></thead><tbody><tr><td align="center"><em>Joe</em></td><td align="center"><em>190</em></td></tr><tr><td align="center"><code>Tom</code></td><td align="center"><code>188</code></td></tr><tr><td align="center"><strong>Nick</strong></td><td align="center"><strong>186</strong></td></tr><tr><td align="center"><code>Bob</code></td><td align="center"><code>175</code></td></tr><tr><td align="center">PRINT</td><td align="center"><code>Bob</code> | <code>Tom</code> | <em>Joe</em> | <strong>Nick</strong></td></tr><tr><td align="center"><em>Mike</em></td><td align="center"><em>170</em></td></tr><tr><td align="center"><code>Ann</code></td><td align="center"><code>168</code></td></tr><tr><td align="center"><strong>Eva</strong></td><td align="center"><strong>168</strong></td></tr><tr><td align="center">PRINT</td><td align="center"><code>Ann</code> | <em>Mike</em> | <strong>Eva</strong></td></tr></tbody></table><p>观察人员分布位置可以看出, 中间人(最高的人, <em>斜体文本</em>)两侧的数字总在距离上差2, </p><p>当排人数为偶数时, 第一个人就是最矮的人; 当排人数为奇数时, 第一个人就是第二矮的人.</p><p>输出完中间人左边的部分(<code>灰背景文本</code>), 再看右边的部分(<strong>粗体蓝字</strong>), 右边人的身高是降序排列的, 而且不管是偶数还是奇数, 和中间人在距离上都差2.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a><code>Code</code></h4><figure class="highlight cpp"><figcaption><span>answer-1</span><a href="/notes/downloads/code/PAT(Base)\1055-集体照\answer-1.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> high;</span><br><span class="line">} people;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(people a, people b)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(a.high == b.high)</span><br><span class="line"><span class="keyword">return</span> a.name &lt; b.name;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.high &gt; b.high;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPeople</span><span class="params">(<span class="built_in">vector</span>&lt;people&gt; p)</span> </span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.size(); i++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, p[i].name.c_str(), p[i].high);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">int</span> length = N / K;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;people&gt; <span class="title">p</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i].name &gt;&gt; p[i].high;</span><br><span class="line">}</span><br><span class="line">sort(p.begin(), p.end(), cmp);</span><br><span class="line"><span class="comment">//printPeople(p);</span></span><br><span class="line"><span class="keyword">int</span> every = N / K;</span><br><span class="line"><span class="keyword">int</span> m = every + (N % K);</span><br><span class="line"><span class="keyword">int</span> highest, center, j = <span class="number">0</span>, begin;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; m &lt;&lt; endl;</span></span><br><span class="line">highest = i;</span><br><span class="line">center = m / <span class="number">2</span>;</span><br><span class="line">begin = i + m - <span class="number">1</span> - (m % <span class="number">2</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j &lt; center) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, p[begin].name.c_str());</span><br><span class="line">begin -= <span class="number">2</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span>(j == center) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, p[highest].name.c_str());</span><br><span class="line">begin = highest + <span class="number">2</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; center) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, p[begin].name.c_str());</span><br><span class="line">begin += <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(++j == m) {</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m != every) m = every;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h3><table><thead><tr><th align="center">name</th><th align="center">height</th></tr></thead><tbody><tr><td align="center"><strong>Joe</strong></td><td align="center"><strong>190</strong></td></tr><tr><td align="center"><code>Tom</code></td><td align="center"><code>188</code></td></tr><tr><td align="center"><strong>Nick</strong></td><td align="center"><strong>186</strong></td></tr><tr><td align="center"><code>Bob</code></td><td align="center"><code>175</code></td></tr><tr><td align="center">PRINT</td><td align="center"><code>Bob</code> | <code>Tom</code> | <strong>Joe</strong> | <strong>Nick</strong></td></tr><tr><td align="center"><strong>Mike</strong></td><td align="center"><strong>170</strong></td></tr><tr><td align="center"><code>Ann</code></td><td align="center"><code>168</code></td></tr><tr><td align="center"><strong>Eva</strong></td><td align="center"><strong>168</strong></td></tr><tr><td align="center"><code>PRINT</code></td><td align="center"><code>Ann</code> | <strong>Mike</strong> | <strong>Eva</strong></td></tr></tbody></table><p>重新观察下位置分布, 可以发现: 当排人数为偶数时先输出最后一个人; 为奇数时先输出倒数第二个人, 隔着按身高排列逆序输出下一个人.</p><p>这样就输出完中间人的左边部分(<code>灰背景文本</code>), 而且不管是奇数还是偶数, 输出左边部分时一定不会输出中间人(每排只有一个人的情况另说), </p><p>再看右边部分(<strong>加粗蓝文本</strong>), 可以发现第一个就是中间人, 同样还是隔着, 但按身高排列正序输出下一个人, 这样就把右边部分都输出了.</p><p>法2应该是最好理解也最简单的.</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a><code>Code</code></h4><figure class="highlight cpp"><figcaption><span>answer-2</span><a href="/notes/downloads/code/PAT(Base)\1055-集体照\answer-2.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> high;</span><br><span class="line">} people;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(people a, people b)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(a.high == b.high)</span><br><span class="line"><span class="keyword">return</span> a.name &lt; b.name;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.high &gt; b.high;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPeople</span><span class="params">(<span class="built_in">vector</span>&lt;people&gt; p, <span class="keyword">int</span> K)</span> </span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----\n"</span>);</span><br><span class="line"><span class="keyword">int</span> every = p.size() / K;</span><br><span class="line"><span class="keyword">int</span> m = p.size() % K + every;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.size(); i++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, p[i].name.c_str(), p[i].high);</span><br><span class="line"><span class="keyword">if</span>(--m == <span class="number">0</span>) {</span><br><span class="line">m = every;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">int</span> length = N / K;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;people&gt; <span class="title">p</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i].name &gt;&gt; p[i].high;</span><br><span class="line">}</span><br><span class="line">sort(p.begin(), p.end(), cmp);</span><br><span class="line"><span class="comment">//printPeople(p, K);</span></span><br><span class="line"><span class="keyword">int</span> every = N / K;</span><br><span class="line"><span class="keyword">int</span> m = every + N % K, flag;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += m, m = every) {</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = (i + m - <span class="number">1</span>) - m % <span class="number">2</span>; j &gt;= i; j -= <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">if</span>(flag++ &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, p[j].name.c_str());</span><br><span class="line">}</span><br><span class="line"><span class="comment">//printf(" |");</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; i + m; j+= <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">if</span>(flag++ &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, p[j].name.c_str());</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://www.jianshu.com/p/eee6c21b1387" target="_blank" rel="noopener">https://www.jianshu.com/p/eee6c21b1387</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接: &lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/problems/994805272021680128&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pintia.cn/problem-sets/994805260223102976/problems/994805272021680128&lt;/a&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="https://i.hstb1230.com/notes/categories/PAT/"/>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>PAT(Base) 1052 卖个萌</title>
    <link href="https://i.hstb1230.com/notes/2020/02/PAT(Base)-1052-%E5%8D%96%E4%B8%AA%E8%90%8C.html"/>
    <id>https://i.hstb1230.com/notes/2020/02/PAT(Base)-1052-%E5%8D%96%E4%B8%AA%E8%90%8C.html</id>
    <published>2020-02-17T21:30:25.000Z</published>
    <updated>2020-02-17T22:09:53.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接: <a href="https://pintia.cn/problem-sets/994805260223102976/problems/99480527388395110" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/99480527388395110</a> <a id="more"></a></p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的：</p><pre><code>[左手]([左眼][口][右眼])[右手]</code></pre><p>现给出可选用的符号集合，请你按用户的要求输出表情。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 []内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。</p><p>之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 <code>Are you kidding me? @\/@</code>。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><pre><code>[╮][╭][o][~\][&#x2F;~]  [&lt;][&gt;] [╯][╰][^][-][&#x3D;][&gt;][&lt;][@][⊙][Д][▽][_][ε][^]  ...41 1 2 2 26 8 1 5 53 3 4 3 32 10 3 9 3</code></pre><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><pre><code>╮(╯▽╰)╭&lt;(@Д&#x3D;)&#x2F;~o(^ε^)oAre you kidding me? @\&#x2F;@</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>前三行分别是手、眼、口的符号集，每个符号头尾为<code>[</code>和<code>]</code>,<br>可以先标记前一个<code>[</code>的位置, 找到<code>]</code>后再截取出符号.</li><li>用数组存储符号集, 也方便后面判断序号是否合法.</li><li>文本中可能会出现干扰文本, 比如第三行的<code>...</code></li></ul><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><ul><li>Dev-C++没法正常输出某些颜文字的问题, </li><li>题目描述不清楚, 或者说是样例不全, 可能会因此疏忽而出现段错误,</li><li>疏忽了C语言字符串中, 单个<code>\</code>表示转义, 无法通过测试点.</li><li>输出文本包含一对括号.</li><li>不能用<code>s[i]</code>判断是否到字符串结尾, 而应该用<code>.length</code>方法.</li><li>如果会正则的话, 这题应该会更简单一些.</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a><code>Code</code></h3><p>因为有一些调试性质的代码, 所以会略乱.</p><figure class="highlight cpp"><figcaption><span>answer</span><a href="/notes/downloads/code/PAT(Base)\1052-卖个萌\answer.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_face</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; face)</span> </span>{</span><br><span class="line">face.clear();</span><br><span class="line"><span class="keyword">int</span> start;</span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'['</span>)</span><br><span class="line">start = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">']'</span>) {</span><br><span class="line"><span class="comment">// cout &lt;&lt; start &lt;&lt; ' ' &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">face.push_back(s.substr(start, i - start));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_face</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; face)</span> </span>{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; face.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; face.size(); i++) {</span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; face[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">string</span> a, b, c;</span><br><span class="line">getline(<span class="built_in">cin</span>, a);</span><br><span class="line">getline(<span class="built_in">cin</span>, b);</span><br><span class="line">getline(<span class="built_in">cin</span>, c);</span><br><span class="line"><span class="comment">//cout &lt;&lt; a &lt;&lt; endl &lt;&lt; b &lt;&lt; endl &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; <span class="title">face</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">get_face(a, face[<span class="number">0</span>]); <span class="comment">// hand</span></span><br><span class="line">get_face(b, face[<span class="number">1</span>]); <span class="comment">// eye</span></span><br><span class="line">get_face(c, face[<span class="number">2</span>]); <span class="comment">// mouth</span></span><br><span class="line"><span class="comment">//print_face(face[0]);</span></span><br><span class="line"><span class="comment">//print_face(face[1]);</span></span><br><span class="line"><span class="comment">//print_face(face[2]);</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> q, w, e, r, t; <span class="comment">// left_hand, left_eye, mouth, right_eye, right_hand</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q &gt;&gt; w &gt;&gt; e &gt;&gt; r &gt;&gt; t;</span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">q &lt;= <span class="number">0</span> || w &lt;= <span class="number">0</span> || e &lt;= <span class="number">0</span> || r &lt;= <span class="number">0</span> || t &lt;= <span class="number">0</span></span><br><span class="line">|| q &gt; face[<span class="number">0</span>].size() || w &gt; face[<span class="number">1</span>].size() || e &gt; face[<span class="number">2</span>].size()</span><br><span class="line">|| r &gt; face[<span class="number">1</span>].size() || t &gt; face[<span class="number">0</span>].size()</span><br><span class="line">) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Are you kidding me? @\\/@\n"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">printf</span>(</span><br><span class="line"><span class="string">"%s(%s%s%s)%s\n"</span>,</span><br><span class="line">face[<span class="number">0</span>][q - <span class="number">1</span>].c_str(),</span><br><span class="line">face[<span class="number">1</span>][w - <span class="number">1</span>].c_str(),</span><br><span class="line">face[<span class="number">2</span>][e - <span class="number">1</span>].c_str(),</span><br><span class="line">face[<span class="number">1</span>][r - <span class="number">1</span>].c_str(),</span><br><span class="line">face[<span class="number">0</span>][t - <span class="number">1</span>].c_str()</span><br><span class="line">);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接: &lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/problems/99480527388395110&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pintia.cn/problem-sets/994805260223102976/problems/99480527388395110&lt;/a&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="https://i.hstb1230.com/notes/categories/PAT/"/>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言计算素数</title>
    <link href="https://i.hstb1230.com/notes/2020/02/C%E8%AF%AD%E8%A8%80%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0.html"/>
    <id>https://i.hstb1230.com/notes/2020/02/C%E8%AF%AD%E8%A8%80%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0.html</id>
    <published>2020-02-03T17:27:55.000Z</published>
    <updated>2020-02-16T01:48:26.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上次疏忽了, 把这篇空白文也打包发布了<a id="more"></a><br> 其实也没什么好写的, 在标题上也特别纠结.</p></blockquote><p>首先, 素数的定义[1]:</p><blockquote><p>质数（Prime number），又称素数，指在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数（也可定义为只有1与该数本身两个正因数的数）。</p></blockquote><p>假定现在有一数N, </p><p>那么最无脑的判断方法, 当然是把<code>2</code>到<code>N - 1</code>都除一遍, 只要有一个能整除, 就不是素数.</p><p>但这样太费时了(时间复杂度为<code>N - 2</code>), 仔细思考下就会发现, 多除了一倍不必要的数字,<br><strong>也就是说, 应该要从<code>2</code>除到<code>N/2</code>.</strong></p><blockquote><p>不是特别严谨但是能懂的论证:<br> 假设N = 1000, 当除数到500之后, 也就是到N一半后, 商值范围为`[2, 1),<br> 也就是说, 接着往下除, 商不可能为整数, 等于做了无意义的求解.<br> <img src="/notes/2020/02/C%E8%AF%AD%E8%A8%80%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0/%E9%99%A4%E4%BB%A5%E6%89%80%E6%9C%89%E6%95%B0.png" class=""></p></blockquote><p>修改为从<code>2</code>除到<code>N / 2</code>后, 时间复杂度降至<code>N / 2 - 1</code>.</p><p>但是还能优化, </p><p>假设N = 100, 也就是要依次除以<code>2</code>,<code>3</code>,<code>4</code>,<code>5</code>,<code>6</code>,<code>7</code>,<code>8</code>,<code>9</code>,<code>10</code>, … ,<code>50</code>.<br>仔细思考, 会发现这里会有两个问题:<br>I. 除以<code>2</code>和除以<code>50</code>重复.<br>II. <code>4</code>,<code>6</code>,<code>8</code>等是可以被<code>2</code>整除的数.</p><p>第 I 点说明除数范围不够严谨, 但无论如何纠正, 都无法用普通的数学表示绕过4这个坑.</p><ul><li>能绕过但看起来奇怪的严谨范围是<code>[2, max(3, N / 2 - 1)), N &gt; 2</code>.</li><li>还有一种不太懂但同样可行的办法是将范围缩小到<code>[2, sqrt(N) + 1)</code></li></ul><p>第 II 点可以用<code>埃拉托斯特尼筛法</code>(简称<code>埃筛法</code>)解决:</p><blockquote><p>从2开始, 将其倍数剔除,<br> 再剔除下一个数3的倍数, 直到没数能剔除.</p></blockquote><p>剔除倍数应该很好理解, 因为素数的定义就是只能被1和本身整除,<br>至于为什么直接认定下一个数是素数, 剔除其倍数, 因为这个数如果不是素数, 那么一定能被前面的某一素数整除.<br>(听起来可能有点绕, 建议自行推算)</p><p>这个做法在求指定范围内的素数很好用, 先上个代码</p><figure class="highlight cpp"><figcaption><span>埃拉托斯特尼筛法</span><a href="/notes/downloads/code/C语言计算素数/埃拉托斯特尼筛法.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">bool</span> a[<span class="number">101</span>];</span><br><span class="line">fill_n(a, <span class="number">101</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">101</span>; i++) {</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span> * i; j &lt; <span class="number">101</span>; j += i)</span><br><span class="line">a[j] = <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">101</span>; i++) {</span><br><span class="line"><span class="keyword">if</span>(a[i])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</span><br></pre></td></tr></table></figure><p>补充一个注意点(因为网页不能同时显示两种文本编码, 所以写在这里):</p><ul><li>将所有元素赋值最好用<code>fill_n</code>或者<code>memset</code>, 不能用<code>bool a[N] = {true};</code>,<br>否则只有第一个元素为<code>true</code>, 但赋值<code>false</code>是全<code>false</code>的(比较神奇的设计)<code>[4]</code></li><li><code>{false}</code>似乎对二维数组无效, 而<code>fill_n</code>不能赋值二维数组, 建议使用<code>memset</code>.</li><li><code>fill_n</code>可以直接使用, <code>memset</code>需要<code>#include &lt;memory.h&gt;</code>(注意不是<code>cmemory</code>, 没这个库)</li></ul><p>将求解过程函数化</p><figure class="highlight cpp"><figcaption><span>埃拉托斯特尼筛法(函数化)</span><a href="/notes/downloads/code/C语言计算素数/埃拉托斯特尼筛法(函数化).cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; prime, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">prime.clear();</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">isPrime</span><span class="params">(n + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line"><span class="keyword">if</span>(isPrime[i]) {</span><br><span class="line">prime.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span> * i; j &lt;= n; j += i)</span><br><span class="line">isPrime[j] = <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line">getPrime(prime, <span class="number">10000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, prime.size());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = prime.begin(); it != prime.end(); it++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, *it);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>但这个写法还是有点小问题 —- 会重复赋值, 比如2和3的公倍数6, 所以就有了<code>欧拉筛法</code>.</p><hr><p>简单来说, 欧拉筛法就是限制赋值, 只需要数被第一个能整除的素数剔除即可.</p><figure class="highlight cpp"><figcaption><span>欧拉筛法</span><a href="/notes/downloads/code/C语言计算素数/欧拉筛法.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; prime, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">prime.clear();</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">is_prime</span><span class="params">(n + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line"><span class="keyword">if</span>(is_prime[i]) {</span><br><span class="line">prime.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; prime.size() &amp;&amp; i * prime[j] &lt;= n; j++) {</span><br><span class="line">is_prime[ i * prime[j] ] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line">get_prime(prime, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = prime.begin(); it != prime.end(); it++) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, *it);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>相对于埃筛法, 其变动代码在于<code>10</code>~<code>16</code>行 (别吐槽缩进, 因为解析器有毒)</p><figure class="highlight cpp"><figcaption><span>欧拉筛法</span><a href="/notes/downloads/code/C语言计算素数/欧拉筛法.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_prime[i]) {</span><br><span class="line">prime.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; prime.size() &amp;&amp; i * prime[j] &lt;= n; j++) {</span><br><span class="line">is_prime[ i * prime[j] ] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li>push_back只是将其加入素数列表.</li><li>不再是遇到素数时才剔除, 而是剔除当前这个数与每个素数的积,<br>若能整除素数, 则不再剔除该数与下个素数的积.</li><li><code>i * prime[j] &lt;= n</code>用来防止数组越界, 或者理解成不判断计算范围外的数.</li><li><del>突然意识到我不该在C++混用驼峰风格hh</del>(C++方法名和变量都是<code>a_b</code>, 而不是<code>aB</code>)</li></ul><p>计算20以内的素数, 每轮剔除数信息.</p><img src="/notes/2020/02/C%E8%AF%AD%E8%A8%80%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0/%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%B3%95%E6%A8%A1%E6%8B%9F(20).png" class=""><p>如果不限制计算范围, 或者说计算所有素数, 将会是这种情况(这里限制查看范围到50)</p><img src="/notes/2020/02/C%E8%AF%AD%E8%A8%80%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0/%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%B3%95%E6%A8%A1%E6%8B%9F(50).png" class=""><hr><p>不过, 如果只是想判断这个素数是不是素数,<br>只要把找到的素数缓存下来, 判断当前这个数是否能整除所有素数, </p><figure class="highlight cpp"><figcaption><span>简易判断法</span><a href="/notes/downloads/code/C语言计算素数/简易判断法.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> &amp; n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> prime[<span class="number">10000</span>] = {<span class="number">2</span>};</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = n / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = prime[t - <span class="number">1</span>] + <span class="number">1</span>; i &lt;= end; i++) {</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = k; j &lt; t; j++) {</span><br><span class="line"><span class="keyword">if</span>(n % prime[j] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(j + <span class="number">1</span> == t &amp;&amp; i % prime[j] != <span class="number">0</span>) {</span><br><span class="line">k = t;</span><br><span class="line">prime[t++] = i;</span><br></pre></td></tr></table></figure><ul><li>注意保存素数列表的prime数组大小, 如果数值很大, 也要修改, 否则会发生溢出.</li><li><code>static</code>可以去掉, 设置成静态数组只是能更快的运行完这份代码,<br>注意: 这份代码是依次判断2~10000有哪些是素数, 没有缓存素数时, 每判断一个数, 都要生成一次素数列表,<br>而不像上份源码那样, 一次性生成2~10000的素数, 所以运行会慢.</li><li>最开始运行时间慢好多, 经过不断优化后总算和前面几种方法差不太多, 吐血.</li></ul><p>最后, 送上一个超简易版, 也就是傻瓜版.</p><figure class="highlight cpp"><figcaption><span>超简易版</span><a href="/notes/downloads/code/C语言计算素数/超简易版.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> end = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; end; i++) {</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>附上时间差异, 反正我的内心是懵圈的.</p><img src="/notes/2020/02/C%E8%AF%AD%E8%A8%80%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0/%E9%80%9F%E5%BA%A6%E5%B7%AE%E5%BC%82.png" class=""><p>不过, 没准把埃式和欧拉去掉vector可能会再快一些吧. 有精力再咕了.</p><p>写在最后:</p><blockquote><p>其实是刷题目(<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112" target="_blank" rel="noopener">1013 数素数</a>)的时候遇到的一个知识点, 本来是想分享一下思路, 不知不觉写到这了.<br> 分享下我的丢人写法.<br> <figure class="highlight cpp"><figcaption><span>1013_数素数</span><a href="/notes/downloads/code/C语言计算素数/1013_数素数.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> end = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; end; i++) {</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNextPrime</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> startPrime)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> prime = startPrime;</span><br><span class="line"><span class="keyword">if</span>(prime == <span class="number">2</span>)</span><br><span class="line">prime = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = prime + <span class="number">2</span>; ; i += <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">if</span>(isPrime(i)) {</span><br><span class="line">prime = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> prime;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> prime = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line"><span class="comment">// printf("%d:%d\n", i, prime);</span></span><br><span class="line">prime = getNextPrime(prime);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &lt;= n; i++) {</span><br><span class="line"><span class="comment">// printf("%d:%d\n", i, prime);</span></span><br><span class="line"><span class="keyword">if</span>(++flag % <span class="number">10</span> != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; prime;</span><br><span class="line"><span class="keyword">if</span>(flag % <span class="number">10</span> == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">prime = getNextPrime(prime);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><br> 脑壳有点大, 如果有想起了什么再补充.</p></blockquote><p>参考链接:<br>[1] <a href="https://zh.wikipedia.org/wiki/%E7%B4%A0%E6%95%B0" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%B4%A0%E6%95%B0</a><br>[2] <a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95</a><br>[3] <a href="https://www.jianshu.com/p/7867517826e7" target="_blank" rel="noopener">https://www.jianshu.com/p/7867517826e7</a><br>[4] <a href="https://blog.csdn.net/u012223913/article/details/51176071" target="_blank" rel="noopener">https://blog.csdn.net/u012223913/article/details/51176071</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上次疏忽了, 把这篇空白文也打包发布了
    
    </summary>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>C语言控制分隔符输出</title>
    <link href="https://i.hstb1230.com/notes/2020/02/C%E8%AF%AD%E8%A8%80%E6%8E%A7%E5%88%B6%E5%88%86%E9%9A%94%E7%AC%A6%E8%BE%93%E5%87%BA.html"/>
    <id>https://i.hstb1230.com/notes/2020/02/C%E8%AF%AD%E8%A8%80%E6%8E%A7%E5%88%B6%E5%88%86%E9%9A%94%E7%AC%A6%E8%BE%93%E5%87%BA.html</id>
    <published>2020-02-03T15:35:03.000Z</published>
    <updated>2020-02-03T16:59:55.570Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我又来丢人了.jpg<a id="more"></a></p></blockquote><p>目前只遇上(或者说记得)这_种, 有更多情况再补充吧</p><h3 id="以空格分隔数据"><a href="#以空格分隔数据" class="headerlink" title="以空格分隔数据"></a>以空格分隔数据</h3><p>这个无脑, 每次输出数据的时候多带个空格就好.<br>诸如: </p><ul><li><code>printf(&quot;%d &quot;, data[i]);</code></li><li><code>cout &lt;&lt; data[i] &lt;&lt; &#39; &#39;;</code></li></ul><h3 id="以空格分隔数据，但行末不得有多余空格"><a href="#以空格分隔数据，但行末不得有多余空格" class="headerlink" title="以空格分隔数据，但行末不得有多余空格"></a>以空格分隔数据，但行末不得有多余空格</h3><p>两种思路, 但至少先把数据和分隔符单独输出.<br>都是借助循环的当前位置</p><ol><li>先输出数据, 再控制输出分隔符<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; data[i];</span><br><span class="line">    <span class="keyword">if</span>(i + <span class="number">1</span> &lt; n) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>先控制输出分隔符, 后直接输出数据<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; data[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>个人觉得后者会好一点, 毕竟少了n次加法运算</li></ol><h3 id="以空格分隔数据，并且每行只输出10个数据"><a href="#以空格分隔数据，并且每行只输出10个数据" class="headerlink" title="以空格分隔数据，并且每行只输出10个数据"></a>以空格分隔数据，并且每行只输出10个数据</h3><p>依旧可以参考上者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">10</span> &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; data[i];</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">9</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过, 对于i不是从0开始的情况, 就要额外计算i的相对位置了, 即再减去起点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">5</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; data[i];</span><br><span class="line">    <span class="keyword">if</span>((i - <span class="number">5</span>) % <span class="number">10</span> == <span class="number">9</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样显得更复杂了点, 而且控制输出分隔符的条件也要进行对应修改,<br>所以更宁愿牺牲一点空间, 引入标志变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    flag = i % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag &gt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; data[i];</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">9</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果最后一行不需要输出换行, 修改最后一个条件即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag == <span class="number">9</span> &amp;&amp; i + <span class="number">1</span> &lt; n) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>不过这样还是要变复杂了, 水平不够, 暂未想到更好的方法.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我又来丢人了.jpg
    
    </summary>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>C语言读入一行文本</title>
    <link href="https://i.hstb1230.com/notes/2020/01/C%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%85%A5%E4%B8%80%E8%A1%8C%E6%96%87%E6%9C%AC.html"/>
    <id>https://i.hstb1230.com/notes/2020/01/C%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%85%A5%E4%B8%80%E8%A1%8C%E6%96%87%E6%9C%AC.html</id>
    <published>2020-01-31T15:12:33.000Z</published>
    <updated>2020-01-31T19:14:49.807Z</updated>
    
    <content type="html"><![CDATA[<p>常见的坑问题, <a id="more"></a>方法可能不是特别完整, 但应该够用.</p><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><figure class="highlight c"><figcaption><span>C-gets.c</span><a href="/notes/downloads/code/C语言读入一行文本/C-gets.c">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">gets(s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>此方法不会读入换行</p><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><figure class="highlight c"><figcaption><span>C-scanf.c</span><a href="/notes/downloads/code/C语言读入一行文本/C-scanf.c">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n\r]"</span>, &amp;s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>此方法不会读入换行</p><blockquote><p><code>%[]</code>表示输入集合, <code>^</code>表示排除<br>完整的换行应该为<code>\n\r</code>, 如果只排除了<code>\n</code>, 那么在某些Linux评测机上会出现错误</p></blockquote><h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h3><h4 id="缺陷版本"><a href="#缺陷版本" class="headerlink" title="缺陷版本"></a>缺陷版本</h4><figure class="highlight c"><figcaption><span>C-getchar.c</span><a href="/notes/downloads/code/C语言读入一行文本/C-getchar.c">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((s[i++] = getchar()) != <span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>此方法会读入换行, 而且比较难避免不同评测环境下的换行不同问题.</p><h4 id="改进版本"><a href="#改进版本" class="headerlink" title="改进版本"></a>改进版本</h4><figure class="highlight c"><figcaption><span>C-getchar-better.c</span><a href="/notes/downloads/code/C语言读入一行文本/C-getchar-better.c">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">s[i] = getchar();</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'\n'</span> || s[i] == <span class="string">'\r'</span>) <span class="keyword">break</span>;</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h3><figure class="highlight c"><figcaption><span>CPP-getline.cpp</span><a href="/notes/downloads/code/C语言读入一行文本/CPP-getline.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>此方法不会读入换行,<br>相比C语言的所有方法都好的地方就是不受到长度限制, 避免内存溢出攻击.<br>但<code>getline</code>函数实际上有三个参数:</p><ol><li><code>input</code>    -    获取数据来源的流</li><li><code>str</code>    -    放置数据的目标 string</li><li><code>delim</code>    -    分隔字符</li></ol><p>因为分割字符<code>delim</code>的默认值为换行符, 因此可以起到只读一行的效果.</p><h3 id="cin-getline"><a href="#cin-getline" class="headerlink" title="cin.getline"></a>cin.getline</h3><figure class="highlight c"><figcaption><span>CPP-cin-getline.cpp</span><a href="/notes/downloads/code/C语言读入一行文本/CPP-cin-getline.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">cin</span>.getline(s, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span>.getline(s, <span class="number">1024</span>, <span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>此方法不会读入换行<br>需要注意的是:</p><ul><li>该方法(第一个参数)针对的是<code>char*</code>类型变量</li><li>第二个参数是读入的字符串大小<code>count</code></li><li>第三个参数(分隔符<code>delim</code>)忽略时, 为<code>\n</code></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://zh.cppreference.com/w/c/io/fscanf" target="_blank" rel="noopener">https://zh.cppreference.com/w/c/io/fscanf</a><br>[2] <a href="https://zh.cppreference.com/w/cpp/io/basic_istream/getline" target="_blank" rel="noopener">https://zh.cppreference.com/w/cpp/io/basic_istream/getline</a><br>[3] <a href="https://www.cnblogs.com/morui/p/11046579.html" target="_blank" rel="noopener">https://www.cnblogs.com/morui/p/11046579.html</a></p>]]></content>
    
    <summary type="html">
    
      常见的坑问题
    
    </summary>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>H3C交换机绑定IPv4</title>
    <link href="https://i.hstb1230.com/notes/2019/09/H3C%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9AIP.html"/>
    <id>https://i.hstb1230.com/notes/2019/09/H3C%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%91%E5%AE%9AIP.html</id>
    <published>2019-09-21T14:54:54.000Z</published>
    <updated>2020-01-31T19:18:56.987Z</updated>
    
    <content type="html"><![CDATA[<p>这边提到的是IPv4静态绑定，慢慢整理ing. <a id="more"></a></p><h2 id="user-bind"><a href="#user-bind" class="headerlink" title="user-bind"></a><code>user-bind</code></h2><ul><li>使用范围<br>二层以太网端口视图</li><li>指令格式<br><code>user-bind { ip-address</code><em><code>ip-address</code></em><code>| ip-address</code><em><code>ip-address</code></em><code>mac-address</code><em><code>mac-address</code></em><code>| mac-address</code><em><code>mac-address</code></em><code>} [ vlan</code><em><code>vlan-id</code></em><code>]</code></li><li>说明<br><code>ip-address</code>和<code>mac-address</code>至少要指定一项.<br>如果使用了<code>ARP Detection</code>功能，需要指定<code>vlan</code>.<br><code>mac-address</code>的格式是 <strong><code>xxxx-xxxx-xxxx</code></strong> 而不是<code>xx:xx:xx:xx:xx:xx</code>.</li><li>举例<code>[1]</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在端口GigabitEthernet1/0/1上配置一条IPv4静态绑定表项（绑定IP＋MAC）。</span></span><br><span class="line">&lt;Sysname&gt; system-view</span><br><span class="line">[Sysname] interface gigabitethernet 1/0/1</span><br><span class="line">[Sysname-GigabitEthernet1/0/1] user-bind ip-address 192.168.0.1 mac-address 0001-0001-0001</span><br></pre></td></tr></table></figure></li><li>注意事项<br>第7版中已经删除该指令。<br>某些型号的第5版也不支持该指令.</li></ul><h2 id="ip-source-binding"><a href="#ip-source-binding" class="headerlink" title="ip source binding"></a><code>ip source binding</code></h2><p>该指令有两种格式，视使用范围而定。</p><ol><li><p>系统视图(针对全局所有端口都生效)<br><code>ip source binding ip-address</code><em><code>ip-address</code></em> <code>mac-address</code><em><code>mac-address</code></em></p></li><li><p>二层以太网端口视图<br><code>ip source binding { ip-address</code><em><code>ip-address</code></em><code>| ip-address</code><em><code>ip-address</code></em><code>mac-address</code><em><code>mac-address</code></em><code>| mac-address</code><em><code>mac-address</code></em><code>} [ vlan</code><em><code>vlan-id</code></em><code>]</code></p></li></ol><ul><li><p>说明<br>端口优先使用端口上的静态绑定表项对收到的报文进行匹配，若匹配失败，再与全局静态绑定表项进行匹配。<code>[1]</code></p></li><li><p>注意事项<code>[1]</code><br>[1] 一个表项不能在同一个端口上重复绑定，但可以在不同端口上绑定。<br>[2] 当IPv4静态绑定表项与IP Source Guard功能配合时，静态绑定表项中的VLAN参数不作为过滤报文的特征项，VLAN参数指定与否，不影响IP Source Guard功能对报文的过滤结果。<br>[3] 在IPv4静态绑定表项与ARP Detection功能配合时，静态绑定表项中必须指定VLAN参数，且该VLAN为使能ARP Detection功能的VLAN，否则ARP报文将无法通过IPv4静态绑定表项的检查。<br>[4] 配置静态表项时，如果系统中已经存在相同内容的动态表项，则新添加的静态表项将会覆盖已有的动态表项。</p></li></ul><h2 id="arp-filter-binding"><a href="#arp-filter-binding" class="headerlink" title="arp filter binding"></a><code>arp filter binding</code></h2><p>这个指令可以限制特定源IP和MAC通过，但本质上并不能算绑定IP，只是因为有限制，所以设备也必须使用IP和MAC，并不能用DHCP获取到该IP。</p><ul><li>使用范围<br>二层以太网端口视图 / 二层聚合接口视图</li><li>指令格式<br><code>arp filter binding</code><em><code>ip-address</code><em><code></code></em><code>mac-address</code></em></li><li>注意事项<code>[1]</code><br>每个端口最多支持配置 <strong>8</strong> 组允许通过的ARP报文的源IP地址和源MAC地址。<br>不能在同一端口下同时配置命令 <strong><code>arp filter source</code></strong> 和 <strong><code>arp filter binding</code></strong> 。</li><li>举例<code>[1]</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在GigabitEthernet1/0/1下开启ARP过滤保护功能，</span></span><br><span class="line"><span class="comment"># 允许源IP地址为1.1.1.1、源MAC地址为2-2-2的ARP报文通过。</span></span><br><span class="line">&lt;Sysname&gt; system-view</span><br><span class="line">[Sysname] interface gigabitethernet 1/0/1</span><br><span class="line">[Sysname-GigabitEthernet1/0/1] arp filter binding 1.1.1.1 2-2-2</span><br></pre></td></tr></table></figure></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;写这篇文章的时候，本来想抛弃<code>user-bind</code>的，因为在实践过程中发现就算提前指定了个IP给设备，设备依旧会获取到一个新IP，但是又不能上网。而最近在操作<code>S5120</code>的时候，发现它明明是第五版命令，但二层端口下也没有<code>user-bind</code>，然后去找其他绑定IP的方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为知识面窄，搞不清楚<code>arp filter binding</code>、<code>arp filter source</code>、<code>ip verify source</code>、<code>ip source binding</code>这几个指令，大佬也不带我，于是去华三官网查文档，才发现只有<code>ip source binding</code>是用来绑定IP的，其他是安全性命令。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特别是<code>arp filter source</code>，它是用来保护网关免受ARP攻击的，和我想的绑定IP相差甚远；<code>arp filter binding</code>只能算绑定了半个IP，因为它的作用是只允许指定IP和MAC通过，还要在DHCP上面绑定了IP或者设备上设成静态IP才能算真的绑定了；<code>ip verify source</code>也可以看做绑定命令，但是更像一个缓存，只是在同个设备第二次获取IP的时候不用再请求DHCP，并没有真正绑定。这也就解释了为什么当时用<code>?</code>查指令帮助的时候，有些命令跟的参数不是具体的IP或MAC，而是<code>ip-address</code>和<code>mac-address</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是操作<code>E528</code>的时候，发现二层端口下没有<code>ip source binding</code>指令，只能用<code>user-bind</code>，去官网查了下<code>S5120</code>的<code>ip source binding</code>，发现这两个指令的参数是一样的，但坑在于，<code>ip source binding</code>的说明中有提到使用<code>arp detection trust</code>时必须指定一个VLAN，而<code>user-bind</code>的说明没提到，以前绑定IP的时候都没有指定<code>VLAN</code>，所以就出现了开头的那种情况，然而就算整了，依旧会从DHCP服务器上获取IP。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到最后还是没能搞定这个鬼问题，似乎只能在DHCP服务器上做静态绑定，而交换机本身只能做到限制罢了。（期待被打脸的那天）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这篇文章其实写好很久了, 当初花了两三天测验, 可能是有什么事情, 哪里疏忽了, 就一直没发, 最近想想还是发了出来, 如果有什么错误请见谅, 提出后我会尽量修改. </p><p>参考链接：</p><ul><li><code>[1]</code><a href="http://www.h3c.com/cn/Service/Document_Software/" target="_blank" rel="noopener">H3C Document</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这边提到的是IPv4静态绑定，慢慢整理ing.
    
    </summary>
    
    
      <category term="H3C" scheme="https://i.hstb1230.com/notes/categories/H3C/"/>
    
      <category term="Switch" scheme="https://i.hstb1230.com/notes/categories/H3C/Switch/"/>
    
      <category term="IP" scheme="https://i.hstb1230.com/notes/categories/H3C/Switch/IP/"/>
    
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
      <category term="IP" scheme="https://i.hstb1230.com/notes/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>易语言取小数位数</title>
    <link href="https://i.hstb1230.com/notes/2019/09/%E6%98%93%E8%AF%AD%E8%A8%80%E5%8F%96%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0.html"/>
    <id>https://i.hstb1230.com/notes/2019/09/%E6%98%93%E8%AF%AD%E8%A8%80%E5%8F%96%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0.html</id>
    <published>2019-09-08T10:52:45.000Z</published>
    <updated>2020-02-03T16:48:41.767Z</updated>
    
    <content type="html"><![CDATA[<p>写了两遍，第二次写是因为发现还有<code>1e-005</code>这种操作.<a id="more"></a></p><figure class="highlight plain"><figcaption><span>getDoubleLength.e</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">.版本 2</span><br><span class="line"></span><br><span class="line">.子程序 取小数位数, 整数型, , 最高6位</span><br><span class="line">.参数 小数数值, 双精度小数型, 可空</span><br><span class="line">.参数 小数文本, 文本型, 可空</span><br><span class="line">.局部变量 数值, 文本型</span><br><span class="line">.局部变量 xLoc, 整数型, , , 小数点或e的文本位置</span><br><span class="line">.局部变量 nLeft, 文本型</span><br><span class="line">.局部变量 nRight, 文本型</span><br><span class="line">.局部变量 len, 双精度小数型</span><br><span class="line"></span><br><span class="line">.判断开始 (是否为空 (小数数值) ＝ 假)</span><br><span class="line">    数值 ＝ 到文本 (小数数值)</span><br><span class="line">.判断 (是否为空 (小数文本) ＝ 假)</span><br><span class="line">    数值 ＝ 小数文本</span><br><span class="line">.默认</span><br><span class="line">    返回 (0)</span><br><span class="line">.判断结束</span><br><span class="line">xLoc ＝ 寻找文本 (数值, “e”, , 假)</span><br><span class="line">.如果真 (xLoc ≠ -1)</span><br><span class="line">    nLeft ＝ 取文本左边 (数值, xLoc － 1)</span><br><span class="line">    nRight ＝ 取文本右边 (数值, 取文本长度 (数值) － xLoc)</span><br><span class="line">    len ＝ 取小数位数 (, nLeft) － 到整数 (nRight)</span><br><span class="line">    .如果真 (len ＜ 0)</span><br><span class="line">        返回 (0)</span><br><span class="line">    .如果真结束</span><br><span class="line">    返回 (len)</span><br><span class="line">.如果真结束</span><br><span class="line">xLoc ＝ 寻找文本 (数值, “.”, , 假)</span><br><span class="line">.如果真 (xLoc ＝ -1)</span><br><span class="line">    返回 (0)</span><br><span class="line">.如果真结束</span><br><span class="line">nRight ＝ 取文本右边 (数值, 取文本长度 (数值) － xLoc)</span><br><span class="line">.判断循环首 (nRight ≠ “” 且 取文本右边 (nRight, 1) ＝ “0”)</span><br><span class="line">    .如果真 (取文本长度 (nRight) ＝ 1)</span><br><span class="line">        nRight ＝ “”</span><br><span class="line">        跳出循环 ()</span><br><span class="line">    .如果真结束</span><br><span class="line">    nRight ＝ 取文本左边 (nRight, 取文本长度 (nRight) － 1)</span><br><span class="line">.判断循环尾 ()</span><br><span class="line">返回 (取文本长度 (nRight))</span><br></pre></td></tr></table></figure><p>附件：</p><ul><li><a href="/notes/2019/09/%E6%98%93%E8%AF%AD%E8%A8%80%E5%8F%96%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0/%E4%BB%A3%E7%A0%81%E5%9B%BE.png" title="代码图.png">代码图.png</a></li><li><a href="/notes/2019/09/%E6%98%93%E8%AF%AD%E8%A8%80%E5%8F%96%E5%B0%8F%E6%95%B0%E4%BD%8D%E6%95%B0/getDoubleLength.e" title="getDoubleLength.e">getDoubleLength.e</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写了两遍，第二次写是因为发现还有&lt;code&gt;1e-005&lt;/code&gt;这种操作.
    
    </summary>
    
    
      <category term="E" scheme="https://i.hstb1230.com/notes/categories/E/"/>
    
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
      <category term="E" scheme="https://i.hstb1230.com/notes/tags/E/"/>
    
  </entry>
  
  <entry>
    <title>记一次易语言的奇怪坑</title>
    <link href="https://i.hstb1230.com/notes/2019/09/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%98%93%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A5%87%E6%80%AA%E5%9D%91.html"/>
    <id>https://i.hstb1230.com/notes/2019/09/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%98%93%E8%AF%AD%E8%A8%80%E7%9A%84%E5%A5%87%E6%80%AA%E5%9D%91.html</id>
    <published>2019-09-07T16:24:33.000Z</published>
    <updated>2020-01-31T19:15:43.098Z</updated>
    
    <content type="html"><![CDATA[<p>明明啥也没干，可程序就是出了bug。<a id="more"></a></p><blockquote><p>重要提示:<br>本文是水文，仅做记录吐槽用，并没有分析底层原因。</p></blockquote><p>昨天给别人写插件的时候，发现一个很奇怪的坑，</p><p>给一个子程序(这里称为<code>函数A</code>)传了文本型参数(这里称为<code>原变量</code>)，但没有在函数A里对原变量做任何修改，只是读取它的文本值，可在调用完函数A后，原变量莫名奇妙的变成了空文本，或者是乱码，像是被非法修改了内存一样。</p><p>因为易语言的设定是「只要你给我传一个非基本类型的数据变量，我就强制你传的是变量地址而不是变量内容」，</p><p>于是我长了个心眼，把原变量拷贝了一份(这里称为<code>新变量</code>)再使用，</p><p>但其实就是<code>新变量 ＝ 原变量</code>罢了，因为易语言下的<code>＝</code>实际上是申请一个新变量， 所以操作新变量并不会改变原变量。</p><p>可就算这么做了，奇怪的事情还是发生了，原变量依旧像前面一样被非法篡改，简直把我搞懵了。</p><p>只好进一步的分析，发现函数A里又把原变量传给了另一个函数(这里称为<code>函数B</code>)，函数B里对新变量做了编码再覆盖操作，可是用前面的方法稍加改造后仍然如此，让我差点怀疑易语言的赋值是不是只拷贝了地址。</p><p>再用简单粗暴的<code>调试输出</code>分析了有使用原变量的几处代码后，发现使用前后的原变量内容都没有变化，只有在调用完函数A之后才发生变化，哪怕是在函数A快调用结束之前也没有变化。</p><p>所以就更懵逼了，这显然是很不科学的，</p><p>而且忘记补充了，我在win10下是没有这个问题的，是换到win7和2008下才出现的。</p><p>但是我真的已经尽力了，从快接近底层的地方已经去排查一遍也没有办法，只好简单粗暴的使用了<code>新变量 ＝ 到文本(到字节集(原变量))</code>，然后就非常正常了。</p><p>但真的很迷惑啊，难道赋值操作并没有拷贝变量吗，用了几年易语言的我表示真的不能理解(吐血…)</p><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明明啥也没干，可程序就是出了bug。
    
    </summary>
    
    
      <category term="E" scheme="https://i.hstb1230.com/notes/categories/E/"/>
    
      <category term="变量" scheme="https://i.hstb1230.com/notes/categories/E/%E5%8F%98%E9%87%8F/"/>
    
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
      <category term="E" scheme="https://i.hstb1230.com/notes/tags/E/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7添加6in4隧道</title>
    <link href="https://i.hstb1230.com/notes/2019/08/CentOS7%E6%B7%BB%E5%8A%A06in4%E9%9A%A7%E9%81%93.html"/>
    <id>https://i.hstb1230.com/notes/2019/08/CentOS7%E6%B7%BB%E5%8A%A06in4%E9%9A%A7%E9%81%93.html</id>
    <published>2019-08-21T08:37:14.000Z</published>
    <updated>2020-02-03T16:48:58.566Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云ECS对原生IPv6的支持依旧艰难，只好用上了HE的6in4隧道<a id="more"></a></p><h1 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h1><p>首先要检查系统是否开启IPv6<br>编辑<code>\etc\sysctl.conf</code>，确保包含如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv6.conf.all.disable_ipv6 &#x3D; 0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 &#x3D; 0</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 &#x3D; 0</span><br></pre></td></tr></table></figure><p>如有修改，请重启系统。</p><h1 id="脚本信息"><a href="#脚本信息" class="headerlink" title="脚本信息"></a>脚本信息</h1><p>保存以下命令为文件(如<code>he-tunnel.sh</code>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_IP6=<span class="string">"2001:470:abcd:ef::2"</span> </span><br><span class="line">LOCAL_IP4=<span class="string">"192.168.1.1"</span></span><br><span class="line">REMOTE_IP6=<span class="string">"2001:470:abcd:ef::1"</span> </span><br><span class="line">REMOTE_IP4=<span class="string">"1.1.1.1"</span></span><br><span class="line">sudo ip tunnel del he-sit</span><br><span class="line">sudo ip tunnel add he-sit mode sit remote <span class="variable">$REMOTE_IP4</span> <span class="built_in">local</span> <span class="variable">$LOCAL_IP4</span> ttl 255</span><br><span class="line">sudo ip link <span class="built_in">set</span> dev he-sit up</span><br><span class="line">sudo ip -6 addr add <span class="variable">$LOCAL_IP6</span>/64 dev he-sit</span><br><span class="line">sudo ip -6 route add default via <span class="variable">$REMOTE_IP6</span> dev he-sit</span><br></pre></td></tr></table></figure><h1 id="脚本说明"><a href="#脚本说明" class="headerlink" title="脚本说明"></a>脚本说明</h1><ul><li><code>LOCAL_IP6</code>：HE分配的<code>Client IPv6 Address</code>(不要带<code>/64</code>)</li><li><code>LOCAL_IP4</code>：用于访问外网的网卡IP，专有网络系列是内网IP，早期的经典网络系列是公网IP</li><li><code>REMOTE_IP6</code>：HE分配的<code>Server IPv6 Address</code>(不要带<code>/64</code>)</li><li><code>REMOTE_IP4</code>：<code>Server IPv4 Address</code>，即服务器IP</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>运行脚本前，请先确保主机能ping通HE的服务器IP，<br>如果能ping通，但运行脚本后仍访问不了IPv6网站，请更换其他地区的隧道服务器。</p><p>第一次运行脚本会输出<code>delete tunnel &quot;he-sit&quot; failed: No such device</code>，无需在意。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -6 -c 5 -i 3 -I he-sit 2001:470:abcd:ef::1</span><br></pre></td></tr></table></figure><p><code>2001:470:abcd:ef::1</code>为前面的<code>REMOTE_IP6</code>，如果能通就说明配置正确。</p><h1 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h1><p>编辑<code>/etc/rc.d/rc.local</code>，在末尾追加一行<code>/usr/local/bin/he-tunnel.sh</code>(视脚本的具体路径而定)</p><h1 id="部分排错"><a href="#部分排错" class="headerlink" title="部分排错"></a>部分排错</h1><ul><li><p>运行脚本出现<code>bash: ./he-tunnel.sh: Permission denied</code>。</p><blockquote><p>没有执行权限，在脚本目录下执行<code>chmod 755 he-tunnel.sh</code>即可。</p></blockquote></li><li><p>运行脚本出现<code>RTNETLINK answers: Permission denied</code>。</p><blockquote><p>根据第一步操作，检查系统是否开启对IPv6的支持。</p></blockquote></li><li><p>运行脚本出现<code>RTNETLINK answers: No route to host</code>。</p><blockquote><p>一般和上一个错误一起出现，开启IPv6支持后未遇到，待补充。</p></blockquote></li><li><p>无法ping通其他IPv6地址。</p><blockquote><p>检查脚本中的<code>LOCAL_IP4</code>是否设置为用于访问外网的网卡的IP。</p></blockquote></li><li><p>运行脚本出现<code>RTNETLINK answers: File exists</code>。</p><blockquote><p>检查是否添加了多个隧道，如果不想删除其他隧道，请将脚本最后一行中的<code>default</code>修改为<code>$REMOTE_IP6/64</code></p></blockquote></li><li><p>刚开始能用电脑ping通服务器地址(这里指自己的服务器)，但是过一段时间就不行了。</p><blockquote><ol><li>检查防火墙或安全组是否放通41协议(不是TCP，也不是UDP，只是个协议号，也称GRE)，同时不要忘记检查服务商的安全组策略。</li><li>如果无法操作防火墙，可以加一个定时任务，执行内容为前面的测试脚本。</li></ol></blockquote></li><li><p>系统启动后未自动创建隧道</p><blockquote><p>检查文件<code>/etc/rc.d/rc.local</code>是否有执行权限。</p></blockquote></li></ul><p>参考链接：</p><ul><li><a href="https://github.com/tuna/ipv6.tsinghua.edu.cn/blob/master/isatap.md#linux-%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">Tsinghua isatap</a></li><li><a href="https://tunnelbroker.net/tunnel_detail.php?tid=548039#tunnelInfoTabs-2" target="_blank" rel="noopener">Example Configurations</a></li><li><a href="https://blog.chenjia.me/articles/160301-134110.html?spm=5176.bbsr283891.0.0.eaKNSM" target="_blank" rel="noopener">阿里云通过He.net添加IPV6</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云ECS对原生IPv6的支持依旧艰难，只好用上了HE的6in4隧道
    
    </summary>
    
    
      <category term="CentOS7" scheme="https://i.hstb1230.com/notes/categories/CentOS7/"/>
    
      <category term="IPTunnel" scheme="https://i.hstb1230.com/notes/categories/CentOS7/IPTunnel/"/>
    
      <category term="6in4" scheme="https://i.hstb1230.com/notes/categories/CentOS7/IPTunnel/6in4/"/>
    
    
      <category term="IPv6" scheme="https://i.hstb1230.com/notes/tags/IPv6/"/>
    
      <category term="隧道" scheme="https://i.hstb1230.com/notes/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>Python3保存requests的cookies</title>
    <link href="https://i.hstb1230.com/notes/2019/08/Python3%E4%BF%9D%E5%AD%98requests%E7%9A%84cookies.html"/>
    <id>https://i.hstb1230.com/notes/2019/08/Python3%E4%BF%9D%E5%AD%98requests%E7%9A%84cookies.html</id>
    <published>2019-08-12T09:07:50.000Z</published>
    <updated>2020-02-03T16:49:17.486Z</updated>
    
    <content type="html"><![CDATA[<p>用了几天requests后, 发现它的cookie只在本次运行脚本中有效, 这样肯定不行的.<a id="more"></a></p><p>所以要提前保存Cookie, 在下次运行脚本时使用.</p><p>目前只看到一个方法, 但是应该不止, 以后会继续补充.</p><h1 id="使用pickle"><a href="#使用pickle" class="headerlink" title="使用pickle"></a>使用pickle</h1><h2 id="保存变量"><a href="#保存变量" class="headerlink" title="保存变量"></a>保存变量</h2><figure class="highlight python"><figcaption><span>pickle-save.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'https://aq.qq.com/cn2/index'</span>)</span><br><span class="line">print(s.cookies)</span><br><span class="line"><span class="comment"># 将cookies写到文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cookie'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(s.cookies, f)</span><br></pre></td></tr></table></figure><h2 id="恢复变量"><a href="#恢复变量" class="headerlink" title="恢复变量"></a>恢复变量</h2><figure class="highlight python"><figcaption><span>pickle-load.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从文件中读取cookies</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cookie'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 使用update方法或者直接赋值</span></span><br><span class="line">    s.cookies.update(pickle.load(f))</span><br><span class="line">    <span class="comment"># s.cookies = pickle.load(f)</span></span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><a href="/notes/2019/08/Python3%E4%BF%9D%E5%AD%98requests%E7%9A%84cookies/pickle-save.py" title="pickle-save.py">pickle-save.py</a></li><li><a href="/notes/2019/08/Python3%E4%BF%9D%E5%AD%98requests%E7%9A%84cookies/pickle-load.py" title="pickle-load.py">pickle-load.py</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了几天requests后, 发现它的cookie只在本次运行脚本中有效, 这样肯定不行的.
    
    </summary>
    
    
      <category term="Python3" scheme="https://i.hstb1230.com/notes/categories/Python3/"/>
    
      <category term="requests" scheme="https://i.hstb1230.com/notes/categories/Python3/requests/"/>
    
      <category term="cookie" scheme="https://i.hstb1230.com/notes/categories/Python3/requests/cookie/"/>
    
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
      <category term="Python3" scheme="https://i.hstb1230.com/notes/tags/Python3/"/>
    
      <category term="requests" scheme="https://i.hstb1230.com/notes/tags/requests/"/>
    
      <category term="cookie" scheme="https://i.hstb1230.com/notes/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>在Python3的requests中使用自签名证书</title>
    <link href="https://i.hstb1230.com/notes/2019/07/%E5%9C%A8Python3%E7%9A%84requests%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6.html"/>
    <id>https://i.hstb1230.com/notes/2019/07/%E5%9C%A8Python3%E7%9A%84requests%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6.html</id>
    <published>2019-07-24T03:27:31.000Z</published>
    <updated>2019-08-10T10:10:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>在requests下使用代理访问https网站时出现了错误<a id="more"></a></p><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>Python版本为<code>3.5</code>/<code>3.6</code>/<code>3.7</code>，requests库版本为<code>2.21.0</code><br>代理软件: <code>Fiddler 4</code>，监听地址为：<code>0.0.0.0:8888</code>.</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一般情况下，我们直接访问https网页是这样的：</p><figure class="highlight python"><figcaption><span>get_https_1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个Session对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 使用该对象的get方法请求网站</span></span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br></pre></td></tr></table></figure><p>但有时候为了抓包做分析，看看提交内容是否正确，就会用到代理</p><figure class="highlight python"><figcaption><span>get_https_2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明一个Session对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 声明一个变量存放代理信息</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8888/"</span>,</span><br><span class="line">    <span class="string">"https"</span>: <span class="string">"http://127.0.0.1:8888/"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用代理的两种方法</span></span><br><span class="line"><span class="comment"># [1] 在参数中提交代理信息</span></span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>, proxies=proxies)</span><br><span class="line"><span class="comment"># [2] 修改Session对象的属性</span></span><br><span class="line">s.proxies = proxies</span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br></pre></td></tr></table></figure><p>然后就会出错，详细信息如下（过长，请稍微对比后自行略过）：</p><p>注：</p><ul><li><code>D:\RunEnvironment\Python36\</code>是python程序目录</li><li><code>X:/get_https_2.py</code>是代码文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">D:\RunEnvironment\Python36\python.exe X:/get_https_2.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\contrib\pyopenssl.py"</span>, line 456, <span class="keyword">in</span> wrap_socket</span><br><span class="line">    cnx.do_handshake()</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\OpenSSL\SSL.py"</span>, line 1915, <span class="keyword">in</span> do_handshake</span><br><span class="line">    self._raise_ssl_error(self._ssl, result)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\OpenSSL\SSL.py"</span>, line 1647, <span class="keyword">in</span> _raise_ssl_error</span><br><span class="line">    _raise_current_error()</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\OpenSSL\_util.py"</span>, line 54, <span class="keyword">in</span> exception_from_error_queue</span><br><span class="line">    raise exception_type(errors)</span><br><span class="line">OpenSSL.SSL.Error: [(<span class="string">'SSL routines'</span>, <span class="string">'tls_process_server_certificate'</span>, <span class="string">'certificate verify failed'</span>)]</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py"</span>, line 594, <span class="keyword">in</span> urlopen</span><br><span class="line">    self._prepare_proxy(conn)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py"</span>, line 805, <span class="keyword">in</span> _prepare_proxy</span><br><span class="line">    conn.connect()</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connection.py"</span>, line 344, <span class="keyword">in</span> connect</span><br><span class="line">    ssl_context=context)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\util\ssl_.py"</span>, line 347, <span class="keyword">in</span> ssl_wrap_socket</span><br><span class="line">    <span class="built_in">return</span> context.wrap_socket(sock, server_hostname=server_hostname)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\contrib\pyopenssl.py"</span>, line 462, <span class="keyword">in</span> wrap_socket</span><br><span class="line">    raise ssl.SSLError(<span class="string">'bad handshake: %r'</span> % e)</span><br><span class="line">ssl.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,)</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\adapters.py"</span>, line 449, <span class="keyword">in</span> send</span><br><span class="line">    timeout=timeout</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py"</span>, line 638, <span class="keyword">in</span> urlopen</span><br><span class="line">    _stacktrace=sys.exc_info()[2])</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\urllib3\util\retry.py"</span>, line 399, <span class="keyword">in</span> increment</span><br><span class="line">    raise MaxRetryError(_pool, url, error or ResponseError(cause))</span><br><span class="line">urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host=<span class="string">'httpbin.org'</span>, port=443): Max retries exceeded with url: /user-agent (Caused by SSLError(SSLError(<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,),))</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"X:/get_https_2.py"</span>, line 8, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    r = s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\sessions.py"</span>, line 546, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> self.request(<span class="string">'GET'</span>, url, **kwargs)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\sessions.py"</span>, line 533, <span class="keyword">in</span> request</span><br><span class="line">    resp = self.send(prep, **send_kwargs)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\sessions.py"</span>, line 646, <span class="keyword">in</span> send</span><br><span class="line">    r = adapter.send(request, **kwargs)</span><br><span class="line">  File <span class="string">"D:\RunEnvironment\Python36\lib\site-packages\requests\adapters.py"</span>, line 514, <span class="keyword">in</span> send</span><br><span class="line">    raise SSLError(e, request=request)</span><br><span class="line">requests.exceptions.SSLError: HTTPSConnectionPool(host=<span class="string">'httpbin.org'</span>, port=443): Max retries exceeded with url: /user-agent (Caused by SSLError(SSLError(<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,),))</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 1</span><br></pre></td></tr></table></figure><p>大概说是证书校验错误(<code>certificate verify failed</code>)，于是百度一番</p><h1 id="初步解决"><a href="#初步解决" class="headerlink" title="初步解决"></a>初步解决</h1><ul><li>在<code>get</code>/<code>post</code>等请求方法中加上参数<code>verify=False</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.get(url, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li>或修改整个session的属性<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.verify = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="彻底解决"><a href="#彻底解决" class="headerlink" title="彻底解决"></a>彻底解决</h1><p>虽然使用前面的做法后程序不出错了，但是每次通过代理访问https网站时又会出现警告:</p><blockquote><p><code>D:\RunEnvironment\Python36\lib\site-packages\urllib3\connectionpool.py:847</code>: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: <a href="https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings" target="_blank" rel="noopener">https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</a></p></blockquote><p>大概意思是「现在创建的是未经验证的https请求，强烈建议添加证书验证」</p><p>同时也给了个文档地址，大概是要装<code>certifi</code>库，然后再做一些操作，不过折腾了一会也没搞懂，就放弃了.</p><p>后面去Google搜索，看到Stack Overflow上有个问题类似的帖子，阅读了下发现与我的需求差不多：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">"https://www.python.org"</span>, proxies=&#123;<span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8888"</span>, <span class="string">"https"</span>:<span class="string">"http:127.0.0.1:8888"</span>&#125;,verify=<span class="string">r"FiddlerRoot.pem"</span>)</span><br></pre></td></tr></table></figure>I've got to change .cer(DER format) file into .pem(PEM format). And I realized cert parameter was not that I wanted to use. The code above is a solution for me.<footer><strong>fx-kirin</strong><cite><a href="https://stackoverflow.com/questions/28195834/how-to-capture-python-sslhttps-connection-through-fiddler2" target="_blank" rel="noopener">stackoverflow</a></cite></footer></blockquote><p>后续补充: </p><blockquote><p>execute command in a console <code>openssl x509 -inform der -in FiddlerRoot.cer -out FiddlerRoot.pem</code></p></blockquote><p>大致意思是<code>verify</code>参数可以设置成证书文件的路径，但问题出在需要的是pem格式，而Fiddler导出的证书是<code>cer</code>文件.</p><p>所以要使用OpenSSL转换，命令为<code>openssl x509 -inform der -in [FiddlerRoot.cer] -out [FiddlerRoot.pem]</code></p><ul><li><code>[FiddlerRoot.cer]</code>为你从Fiddler中导出的cer文件路径(相对或绝对路径)</li><li><code>[FiddlerRoot.pem]</code>为导出的pem文件路径.</li></ul><p>因为Windows不带OpenSSL程序，为此又特地<a href="https://i.hstb1230.com/Windows10-64bit-build-OpenSSL.html" title="" target="">摸索了几天</a>，头大</p><p>执行命令后，将pem文件路径传给<code>verify</code>，或者修改整个Session对象的<code>verify</code>属性即可.</p><p>同时，也可以给<code>verify</code>赋值pem文件的所在目录，但要先用OpenSSL附带的<code>c_rehash.pl</code>处理该文件夹.</p><figure class="highlight python"><figcaption><span>get_https_3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个Session对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 修改代理信息</span></span><br><span class="line">s.proxies = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8888/"</span>,</span><br><span class="line">    <span class="string">"https"</span>: <span class="string">"http://127.0.0.1:8888/"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 设置自定义证书</span></span><br><span class="line"><span class="comment"># # 假设证书在代码目录下的cert文件夹里，文件名为FiddlerRoot.pem</span></span><br><span class="line"><span class="comment"># # 直接使用相对路径</span></span><br><span class="line">s.verify = <span class="string">r'cert\FiddlerRoot.pem'</span></span><br><span class="line"><span class="comment"># # 如果使用了c_rehash.pl对cert文件夹做了处理，可以修改为如下一行代码</span></span><br><span class="line">s.verify = <span class="string">r'cert'</span></span><br><span class="line">s.get(<span class="string">'https://httpbin.org/user-agent'</span>)</span><br></pre></td></tr></table></figure><p>不过这工具(实际上是Perl代码文件)不怎么适应Windows，识别不到openssl路径，所以对它稍作修改，有需要可以在附件下载.</p><p>用了这个方法几天，发现还有个奇怪的坑，就是转换的pem文件只能在本次打开的Fiddler中使用，第二次打开Fiddler就会证书错误，但是导入到Windows证书管理后，浏览器是可以一直使用的，所以不知道怎么回事，有需要再摸索吧.</p><p>最后补充下这个工具的使用方法吧：</p><blockquote><p>首先需要电脑中要安装perl、openssl并配置环境变量，<br>然后在cmd中执行<code>perl c_rehash.pl pem文件所在目录</code>，<br>如果pem文件所在目录下多出了一个不明代码文件，那么就说明成功了。</p></blockquote><p>二次补充（这次应该是真的最后一次了）：</p><blockquote><p>今天给FTP服务器上TLS的时候，发现openssl生成的证书有效期只有一天，后来查了下，发现在参数列表中加个<code>-days [天数]</code>即可修改有效期.<br>因此也推测转换出来的pem证书也只有一天有效期，而我往往是开一天的Fiddler后才关，所以等我第二次打开Fiddler，也就是第二天的时候，证书自然失效了。<br>所以转换命令应为<code>openssl x509 -inform der -in [FiddlerRoot.cer] -out [FiddlerRoot.pem] -days [3650]</code></p></blockquote><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>本文代码(附件):</p><ul><li><a href="/notes/2019/07/%E5%9C%A8Python3%E7%9A%84requests%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/get_https_1.py" title="get_https_1.py">get_https_1.py</a></li><li><a href="/notes/2019/07/%E5%9C%A8Python3%E7%9A%84requests%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/get_https_2.py" title="get_https_2.py">get_https_2.py</a></li><li><a href="/notes/2019/07/%E5%9C%A8Python3%E7%9A%84requests%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/get_https_3.py" title="get_https_3.py">get_https_3.py</a></li><li><a href="/notes/2019/07/%E5%9C%A8Python3%E7%9A%84requests%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6/c_rehash.pl" title="c_rehash.pl">c_rehash.pl</a></li></ul><p>参考链接:</p><ol><li><a href="https://www.cnblogs.com/tianqianlan/p/9431295.html" title="" target="">REQUESTS库的文档高级用法</a></li><li><a href="https://www.th3r3p0.com/random/python-requests-and-burp-suite.html" title="" target="">Python Requests and Burp Suite</a></li><li><a href="https://stackoverflow.com/questions/46503129/how-to-capture-python-https-traffic-in-fiddler" title="" target="">How to capture python https traffic in fiddler? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/28195834/how-to-capture-python-sslhttps-connection-through-fiddler2" title="" target="">How to capture python SSL(HTTPS) connection through fiddler2 - Stack Overflow</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在requests下使用代理访问https网站时出现了错误
    
    </summary>
    
    
      <category term="Python3" scheme="https://i.hstb1230.com/notes/categories/Python3/"/>
    
      <category term="requests" scheme="https://i.hstb1230.com/notes/categories/Python3/requests/"/>
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/notes/categories/Python3/requests/HTTPS/"/>
    
    
      <category term="Python3" scheme="https://i.hstb1230.com/notes/tags/Python3/"/>
    
      <category term="requests" scheme="https://i.hstb1230.com/notes/tags/requests/"/>
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/notes/tags/HTTPS/"/>
    
      <category term="proxy" scheme="https://i.hstb1230.com/notes/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript取网址请求串</title>
    <link href="https://i.hstb1230.com/notes/2019/02/JavaScript%E5%8F%96%E7%BD%91%E5%9D%80%E8%AF%B7%E6%B1%82%E4%B8%B2.html"/>
    <id>https://i.hstb1230.com/notes/2019/02/JavaScript%E5%8F%96%E7%BD%91%E5%9D%80%E8%AF%B7%E6%B1%82%E4%B8%B2.html</id>
    <published>2019-02-03T17:23:27.000Z</published>
    <updated>2020-01-31T19:18:23.927Z</updated>
    
    <content type="html"><![CDATA[<p>准确来说应该是取域名后面的那串文本，但是实在是不知道叫什么。<a id="more"></a></p><p>方法：使用<code>substring</code>截取url中在域名后面的文本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> href = <span class="built_in">window</span>.location.href; <span class="comment">// url</span></span><br><span class="line">  <span class="keyword">var</span> host = <span class="built_in">window</span>.location.host; <span class="comment">// 域名</span></span><br><span class="line">  <span class="keyword">var</span> query = href.substring(</span><br><span class="line">    href.lastIndexOf(host) + host.length, <span class="comment">// 要加长度</span></span><br><span class="line">    href.length );</span><br><span class="line">  <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前URL：http:&#x2F;&#x2F;localhost&#x2F;manage&#x2F;?test#123456</span><br><span class="line">调用结果：&#x2F;manage&#x2F;?test#123456</span><br></pre></td></tr></table></figure><p>使用场景：登录状态失效或不存在时，在跳转到登录页前获取当前功能页地址并传递给接口，登录后成功后跳转至该页面，优化用户体验。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准确来说应该是取域名后面的那串文本，但是实在是不知道叫什么。
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://i.hstb1230.com/notes/categories/JavaScript/"/>
    
    
      <category term="日常丢人" scheme="https://i.hstb1230.com/notes/tags/%E6%97%A5%E5%B8%B8%E4%B8%A2%E4%BA%BA/"/>
    
      <category term="JavaScript" scheme="https://i.hstb1230.com/notes/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>升级HTTPS需要注意的坑</title>
    <link href="https://i.hstb1230.com/notes/2017/10/%E5%8D%87%E7%BA%A7HTTPS%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91.html"/>
    <id>https://i.hstb1230.com/notes/2017/10/%E5%8D%87%E7%BA%A7HTTPS%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91.html</id>
    <published>2017-10-12T16:21:26.000Z</published>
    <updated>2019-08-07T02:19:33.386Z</updated>
    
    <content type="html"><![CDATA[<p>没错，就是我，又来水文章的我。<a id="more"></a></p><p><del>但是今天应该算是来放干货的。</del></p><p>应该来说，从最开始的有个小绿锁到防运营商的广告污染，HTTPS 已经成了未来站点的发展趋势，<br>那么对应的，网上一定也会出现各种眼花缭乱的教程(<del>包括我的，虽然我之前根本没写过的说</del>)<br>但这些教程总是缺点东西，我写这篇文章的目的就是为了补充一下一些坑。</p><p>那啥，怎么<code>HTTP → HTTPS</code>就不说了哈，我只是想说下升级到 HTTPS 后需要注意的地方。</p><p>众所周知，HTTPS 网页里面不能引用 HTTP 资源，不然会被浏览器标记为<code>不安全</code>，(也就是没有小绿锁，<del>好好的逼格就这样被吃了</del>)，<br>那么，相信很多教程会建议你们把带有<code>http://</code>的内容替换成<code>https://</code>或者<code>//</code>，<br>再高端一点的，会教你们用 <del>世界上最好的</del> <code>PHP</code> 写个代理程序，然后配合 <code>JavaScript</code> 食用，这样做大概是因为某些资源站点不支持 HTTPS 。</p><p>而我就不一样了，作为一个经常长草的静态博客，我既不太想不能用<del>拍簧片</del> PHP，又想看到小绿锁，那我总得找个折中的办法：</p><p>在<code>&lt;head&gt;</code>标签下加上这样一行<code>&lt;meta&gt;</code>标签，就可以让浏览器强制使用 HTTPS 协议获取网页引用的所有资源：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"upgrade-insecure-requests"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>千万不要和我说你不知道怎么加(手动再见)</p><p>下面是效果对比：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/c590fd64ef9e17030aadf4f47b7041f8" alt="添加前的网络访问情况" title="">                </div>                <div class="image-caption">添加前的网络访问情况</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/2003183483e9b65f677d457c94981675" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.1sls.cn/Pic/png/e9b83454df49fcf865547cdc2aba23a8" alt="添加后的网络访问情况，敢跟我说这是审查元素改出来的效果，请主动把头伸过来，让我给你加个五毛特效" title="">                </div>                <div class="image-caption">添加后的网络访问情况，敢跟我说这是审查元素改出来的效果，请主动把头伸过来，让我给你加个五毛特效</div>            </figure><p>有几点得强调下：</p><ol><li>我没测试过各大浏览器的兼容情况，据我<del>临时百度</del>了解，这是 <a href="https://www.w3.org/TR/2012/CR-CSP-20121115/" target="_blank" rel="noopener">W3C 在 2012 年发布的新标准里的一个内容</a>，但我想，是个现代浏览器应该都支持。</li><li>不要以为这个 META 标签是万能的，万一你引用的资源站点只支持 HTTP 协议访问，那么不好意思，该丢的只能丢了，建议有条件的还是用代理方式获取对应资源吧。</li></ol><blockquote><p>来自咸鱼的话：<br> 资源链接最好用<code>//</code>，因为浏览器会自动识别当前协议(<code>HTTP</code>/<code>HTTPS</code>)，不然以后出个新的协议又要改，那就又要接着改。<br> 关于HTTPS网页里不能引用HTTP资源这点可能会有些争议，我印象里前两年的Chrome好像是这样。<br><del>不要奇怪这个发布时间和更新，文章确实是那个时候开始写的，只不过今天(2018/04/02)才写完，原谅我的懒癌</del></p></blockquote><p>希望终有一天，所有的站点都能上HTTPS吧</p>]]></content>
    
    <summary type="html">
    
      只是补充点东西
    
    </summary>
    
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/notes/categories/HTTPS/"/>
    
    
      <category term="HTTPS" scheme="https://i.hstb1230.com/notes/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>用PHP取图像颜色</title>
    <link href="https://i.hstb1230.com/notes/2017/10/%E7%94%A8PHP%E5%8F%96%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2.html"/>
    <id>https://i.hstb1230.com/notes/2017/10/%E7%94%A8PHP%E5%8F%96%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2.html</id>
    <published>2017-10-05T17:26:38.000Z</published>
    <updated>2019-08-07T02:19:28.730Z</updated>
    
    <content type="html"><![CDATA[<p>对 <a href="https://i.hstb.me/PhotoToHtml.html" title="博客上的一篇文章" target="">将图片转为Html网页</a> 以及发布在Github的 <a href="https://github.com/Hstb1230/img2html" title="无人问津" target="">img2html</a> 项目代码的一些补充<a id="more"></a></p><p>对于拥有丰富的扩展和类库的PHP来说，提取图像颜色并非难事，使用自带的<code>GD</code>扩展，借助其中的函数即可完成。</p><p>首先，我们需要借助 <code>imagecreatefrom</code> 开头的函数导入图像，(怎么获取数据就自己来吧，<code>file_get_contents</code> 之类的)</p><blockquote><p>官方文档列出了以下函数：</p></blockquote><ol><li><code>imagecreatefrombmp</code></li><li><code>imagecreatefromgd2</code></li><li><code>imagecreatefromgd2part</code></li><li><code>imagecreatefromgd</code></li><li><code>imagecreatefromgif</code></li><li><code>imagecreatefromjpeg</code></li><li><code>imagecreatefrompng</code></li><li><code>imagecreatefromstring</code></li><li><code>imagecreatefromwbmp</code></li><li><code>imagecreatefromwebp</code></li><li><code>imagecreatefromxbm</code></li><li><code>imagecreatefromxpm</code></li></ol><p>这些函数均只有一个参数，但需要注意的是，</p><blockquote><p>除了 <code>imagecreatefromstring</code> 函数外，其余函数的参数需要为文件的本地路径或网络地址，<br>而 <code>imagecreatefromstring</code> 函数的参数只能为文件数据，<br>并且 <code>imagecreatefromstring</code> 函数可以解析 <code>JPEG</code>，<code>PNG</code>，<code>GIF</code>，<code>WBMP</code> 和 <code>GD2</code> 图片文件。</p></blockquote><p>这里用 <a href="https://img.1sls.cn/Pic/png/6acc6a5b9267214e5f4f4ae12ad4a396" title="" target="">png图片</a> 做解析，因此先</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img = imagecreatefrompng(<span class="string">'https://img.1sls.cn/Pic/png/6acc6a5b9267214e5f4f4ae12ad4a396'</span>);</span><br></pre></td></tr></table></figure><p>然后取图像的宽度与高度：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Y = imagesy($i); <span class="comment">//取高度</span></span><br><span class="line">$X = imagesx($i); <span class="comment">//取宽度</span></span><br></pre></td></tr></table></figure><p>如果我们要计算图像颜色的平均值，那么:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rgb = <span class="number">0</span>; <span class="comment">//用于统计颜色总值</span></span><br><span class="line">$n = $X * $Y; <span class="comment">//用于记录像素点数量</span></span><br></pre></td></tr></table></figure><p>然后先创建一个遍历行的循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个遍历列的循环，但是需要嵌套在行里，即：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></span><br><span class="line">  <span class="keyword">for</span> ($x=<span class="number">0</span>; $x&lt;$X; $x++) &#123; <span class="comment">//循环列</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时借助 <code>imagecolorat</code> 函数，取出指定像素点的颜色值(十进制)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($y=<span class="number">0</span>; $y&lt;$Y; $y++) &#123; <span class="comment">//循环行</span></span><br><span class="line">  <span class="keyword">for</span> ($x=<span class="number">0</span>; $x&lt;$X; $x++) &#123; <span class="comment">//循环列</span></span><br><span class="line">    $rgb += imagecolorat($i,$x,$y); <span class="comment">//取出点($x,$y)的颜色值后，叠加计算</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后计算图像的平均颜色值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$rgb = $rgb / $n;</span><br></pre></td></tr></table></figure><p>得到的颜色值是 10进制 的，如果要转换成 16进制，可以借助函数 <code>dechex</code>。</p><p>最后，记得释放资源：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imagedestroy($i);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 &lt;a href=&quot;https://i.hstb.me/PhotoToHtml.html&quot; title=&quot;博客上的一篇文章&quot; target=&quot;&quot;&gt;将图片转为Html网页&lt;/a&gt; 以及发布在Github的 &lt;a href=&quot;https://github.com/Hstb1230/img2html&quot; title=&quot;无人问津&quot; target=&quot;&quot;&gt;img2html&lt;/a&gt; 项目代码的一些补充
    
    </summary>
    
    
      <category term="PHP" scheme="https://i.hstb1230.com/notes/categories/PHP/"/>
    
      <category term="图像操作" scheme="https://i.hstb1230.com/notes/categories/PHP/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="PHP" scheme="https://i.hstb1230.com/notes/tags/PHP/"/>
    
      <category term="图像操作" scheme="https://i.hstb1230.com/notes/tags/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>配置Notepad++的c语言运行脚本</title>
    <link href="https://i.hstb1230.com/notes/2017/10/%E9%85%8D%E7%BD%AENotepad-%E7%9A%84c%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC.html"/>
    <id>https://i.hstb1230.com/notes/2017/10/%E9%85%8D%E7%BD%AENotepad-%E7%9A%84c%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC.html</id>
    <published>2017-10-04T17:41:36.000Z</published>
    <updated>2019-08-07T02:19:48.068Z</updated>
    
    <content type="html"><![CDATA[<p>上个月正式升级为一名学编程的大学生，不出意料，学校教我们C语言。<br>因为暂时不想使用IDE，所以只好自己安装编译器了，受以前初学时候的影响，我用了MinGW。</p><p>因为没有IDE，如果我要编译代码以及运行调试，就需要借助cmd，<br>但是每次都要输一遍cd那些代码，即使是复制黏贴，也是很烦人的，更何况我还懒。</p><p>后面想到把notepad++自带的运行功能与cmd结合一下，应该就方便很多。<a id="more"></a></p><p>然后上网查方法，看到的教程都是这样给的：</p><blockquote></blockquote><ol><li>复制以下代码，取名<code>编译C</code>：<br><code>cmd /k gcc -o &quot;$(CURRENT_DIRECTORY)\$(NAME_PART).exe&quot; &quot;$(FULL_CURRENT_PATH)&quot; &amp; PAUSE &amp; EXIT</code><blockquote></blockquote></li><li>复制以下代码，取名<code>运行C</code>：<br><code>cmd /c &quot;$(CURRENT_DIRECTORY)\$(NAME_PART).exe&quot; &amp; PAUSE &amp; EXIT</code></li></ol><p>仔细分析下，就会发现调试需要分两步操作，有点麻烦</p><p>所以我改了一下代码，将编译运行一步到位：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd /k gcc -o <span class="string">"<span class="variable">$(CURRENT_DIRECTORY)</span>/<span class="variable">$(NAME_PART)</span>.exe"</span> <span class="string">"<span class="variable">$(FULL_CURRENT_PATH)</span>"</span>  &amp;&amp;  <span class="string">"<span class="variable">$(CURRENT_DIRECTORY)</span>/<span class="variable">$(NAME_PART)</span>.exe"</span> &amp; PAUSE &amp; EXIT</span><br></pre></td></tr></table></figure><p>不过这样做有一个缺点，就是编译出错时，仍然会运行一次程序，如果之前又编译成功过，那么就有可能会误导你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月正式升级为一名学编程的大学生，不出意料，学校教我们C语言。&lt;br&gt;因为暂时不想使用IDE，所以只好自己安装编译器了，受以前初学时候的影响，我用了MinGW。&lt;/p&gt;
&lt;p&gt;因为没有IDE，如果我要编译代码以及运行调试，就需要借助cmd，&lt;br&gt;但是每次都要输一遍cd那些代码，即使是复制黏贴，也是很烦人的，更何况我还懒。&lt;/p&gt;
&lt;p&gt;后面想到把notepad++自带的运行功能与cmd结合一下，应该就方便很多。
    
    </summary>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/categories/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="环境配置" scheme="https://i.hstb1230.com/notes/categories/C%E8%AF%AD%E8%A8%80/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="C语言" scheme="https://i.hstb1230.com/notes/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="环境配置" scheme="https://i.hstb1230.com/notes/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Notepad++" scheme="https://i.hstb1230.com/notes/tags/Notepad/"/>
    
  </entry>
  
</feed>
